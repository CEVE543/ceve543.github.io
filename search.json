[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "",
    "text": "This page contains a schedule of the topics, content, and assignments for the semester. This schedule will be updated as necessary over the course of the semester to accommodate logistics and to adapt to student needs.\nTo print lecture slides to PDF, see these instructions.\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nSlides\nLab\nProject\n\n\n\n\n\nModule 1\nFundamentals\n\n\n\n\n\n1\nMon., Aug. 21\nWelcome to CEVE 543!\n\n\n\n\n\n\nWed., Aug. 23\nWhat drives uncertain climate hazard?\n\n\n\n\n\n\nFri., Aug. 25\nLab 01: Setting up Julia, GitHub, and Quarto\n\n\n\n\n\n2\nMon., Aug. 28\nIntroduction to statistics and probability distributions\n\n\n\n\n\n\nWed., Aug. 30\nWorking with probability distributions\n\n\n\n\n\n\nFri., Sep. 1\nLab 02: Working with tabular data in Julia\n\n\n\n\n\n3\nMon., Sep. 4\nNo class\n\n\n\n\n\n\nWed., Sep. 6\nMaximum likelihood estimation\n\n\n\n\n\n\nFri., Sep. 8\nLab 03: Optimization and distributions in Julia\n\n\n\n\n\n4\nMon., Sep. 11\nBayesian inference I\n\n\n\n\n\n\nWed., Sep. 13\nBayesian inference II\n\n\n\n\n\n\nFri., Sep. 15\nLab 04: Markov Chain Monte Carlo\n\n\n\n\n\n5\nMon., Sep. 18\nFunction approximation\n\n\n\n\n\n\nWed., Sep. 20\nModule 1 review\n\n\n\n\n\n\nFri., Sep. 22\nModule 1 exam\n\n\n\n\n\n\nModule 2\nDownscaling\n\n\n\n\n\n6\nMon., Sep. 25\nMotivation\n\n\n\n\n\n\nWed., Sep. 27\nGeneralized Linear Regression\n\n\n\n\n\n\nFri., Sep. 29\nLab 05: Working with gridded climate data in Julia\n\n\n\n\n\n7\nMon., Oct. 2\nQuantile-quantile bias correction\n\n\n\n\n\n\nWed., Oct. 4\nSupport vector machines\n\n\n\n\n\n\nFri., Oct. 6\nHyperparameter selection and optimization\n\n\n\n\n\n8\nMon., Oct. 9\nLab 06: \\(K\\)-fold cross-validation\n\n\n\n\n\n\nWed., Oct. 11\nModule 2 review\n\n\n\n\n\n\nFri., Oct. 13\nModule 2 exam\n\n\n\n\n\n\nModule 3\nFrequency Analysis\n\n\n\n\n\n9\nMon., Oct. 16\nMotivation (guest: Dr. Philip Bedient)\n\n\n\n\n\n\nWed., Oct. 18\nExtreme value theory\n\n\n\n\n\n\nFri., Oct. 20\nLab 07: Convergence, central limits, and fat tails\n\n\n\n\n\n10\nMon., Oct. 23\nMaximum likelihood and Bayesian GEV models\n\n\n\n\n\n\nWed., Oct. 25\nNonstationary GEV model\n\n\n\n\n\n\nFri., Oct. 27\nLab 08: Graphical model diagnostics\n\n\n\n\n\n11\nMon., Oct. 30\nRegionalization\n\n\n\n\n\n\nWed., Nov. 1\nHierarchical models for regionalization\n\n\n\n\n\n\nFri., Nov. 3\nQuantitative methods for model comparison\n\n\n\n\n\n12\nMon., Nov. 6\nModule 3 review\n\n\n\n\n\n\nWed., Nov. 8\nModule 3 exam\n\n\n\n\n\n\nModule 4\nWeather Typing\n\n\n\n\n\n13\nMon., Nov. 13\nMotivation\n\n\n\n\n\n\nWed., Nov. 15\nPrincipal components analysis\n\n\n\n\n\n\nFri., Nov. 17\nLab 09: \\(K\\)-means clustering\n\n\n\n\n\n14\nMon., Nov. 20\nLatent Variables\n\n\n\n\n\n\nWed., Nov. 22\nNo class\n\n\n\n\n\n\nFri., Nov. 24\nNo class\n\n\n\n\n\n15\nMon., Nov. 27\nHidden Markov Models I\n\n\n\n\n\n\nWed., Nov. 29\nReview module 4\n\n\n\n\n\n\nFri., Dec. 1\nModule 4 Exam"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This course covers the use of tools from data science (statistics, machine learning, and programming) to model climate hazards such as floods and droughts. Through hands-on programming assignments based on state-of-the-art published research, students will learn to apply methods to real-world problems with a strong emphasis on probabilistic methods and uncertainty quantification."
  },
  {
    "objectID": "syllabus.html#course-overview",
    "href": "syllabus.html#course-overview",
    "title": "Syllabus",
    "section": "",
    "text": "This course covers the use of tools from data science (statistics, machine learning, and programming) to model climate hazards such as floods and droughts. Through hands-on programming assignments based on state-of-the-art published research, students will learn to apply methods to real-world problems with a strong emphasis on probabilistic methods and uncertainty quantification."
  },
  {
    "objectID": "syllabus.html#course-information",
    "href": "syllabus.html#course-information",
    "title": "Syllabus",
    "section": "Course Information",
    "text": "Course Information\n\n\n\nInstructor\n\n James Doss-Gollin\n jdossgollin@rice.edu\n Ryon 215\n\n\n\n\nTA\n\n Yuchen Lu\n yl238@rice.edu\n Ryon B28\n\n\n\n\nMeetings\n\n MWF\n 11-11:50am\n Keck 107\n\n\n\n\n\nLearning Objectives\nAt the end of this class, students will:\n\nWrite down generative or statistical models for climate hazards;\nUse Bayesian and maximum likelihood methods to estimate the parameters of simple statistical models (“inverse modeling”);\nUse simulation models (“forward modeling”) to assess the logical implications of statistical models;\nUnderstand and apply extreme value theory to estimate the probability of rare climate hazards;\nCritically interpret statistical analyses of environmental data applied in academic journals, government, and industry; and\nUnderstand and communicate subjective modeling choices to technical (e.g., scientist) and non-technical (e.g., policy-maker) audiences.\n\n\n\nPrerequisites & Preparation\n\nLinear algebra (you should be comfortable with matrix notation and basic operations)\nA course in applied statistics (e.g., STAT 419/519)\nSome exposure to Python, Julia, Matlab, R, or another programming language\n\nIn addition, a course covering machine learning, Bayesian statistics, or applied statistics is encouraged but not required. If you are unsure whether your background gives you an adequate preparation for this course, please contact the instructor!\n\n\n\n\n\n\nWhat If My Skills Are Rusty?\n\n\n\nIf your programming, mathematics, or statistics skills are a little rusty, don’t worry! We will review concepts and build skills over the course of the semester.\n\n\n\n\nTopics\n\n\nThe course will build core skills in:\n\nStatistical inference\nMachine learning\nData exploration and visualization\nExtreme value statistics\nModel selection, validation, and comparison\n\n\nWe will apply these methods to a variety of case studies, including three project-based assignments that cover:\n\nPrecipitation frequency analysis\nFlood extent estimation\nStochastic streamflow generation\n\n\n\nFor a full list of topics to be covered, see the course schedule.\n\n\nRequired Materials\nNo textbook is required for this course. All materials will be posted as open source on the course website or as PDFs on Canvas."
  },
  {
    "objectID": "syllabus.html#a-community-of-learning",
    "href": "syllabus.html#a-community-of-learning",
    "title": "Syllabus",
    "section": "A Community of Learning",
    "text": "A Community of Learning\nRice’s core values are responsibility, integrity, community, and excellence. Our goal is to create a learning community aligned with these core values.\n\nCore Expectations\nCourse success involves a dual responsibility on the part of the instructor and the student.\n\n\nAs the instructor, my responsibility is to provide you with a structure and opportunity to learn. To this end, I commit to:\n\nprovide organized and focused lectures, in-class activities, and assignments;\nencourage students to regularly evaluate and provide feedback on the course;\nmanage the classroom atmosphere to promote learning;\nschedule sufficient out-of-class contact opportunities, such as office hours;\nallow adequate time for assignment completion;\nmake lecture materials, class policies, activities, and assignments accessible to students.\n\n\nStudents are responsible for their own learning in the course and should commit to:\n\nattending all lectures;\ndoing all required preparatory work before class;\nactively participating in online and in-class discussions;\nbeginning assignments and other work early; and\nattending office hours as needed.\n\n\n\n\n\n\n\n\n\nWhat If I’m Sick?\n\n\n\nPlease stay home if you’re feeling sick! This is beneficial for both for your own recovery and the health and safety of your classmates. We will also make any necessary arrangements for you to stay on top of the class material and if whatever is going on will negatively impact your grade, for example by causing you to be unable to submit an assignment on time.\n\n\n\n\n\n\n\n\nCanvas Discussions\n\n\n\n\nIf you wait until the day an assignment is due (or even late the previous night) to ask a question on Canvas, there is a strong chance that I will not see your post prior to the deadline.\nBut if you see unanswered questions and you have some insight, please answer! This class will work best when we all work together as a community.\n\n\n\n\n\nDiversity, Equity, and Inclusion\nRice is committed to building and maintaining an equitable and inclusive campus community. Diversity can refer to multiple ways that we identify ourselves, including but not limited to race, color, national origin, language, sex, disability, age, sexual orientation, gender identity, religion, creed, ancestry, belief, veteran status, or genetic information. Each of these diverse identities, along with many others not mentioned here, shape the perspectives our students, faculty, and staff bring to our campus. We, at Rice, will work to promote diversity, equity and inclusion not only because diversity fuels excellence and innovation, but because we want to pursue justice. We acknowledge our imperfections while we also fully commit to the work, inside and outside of our classrooms, of building and sustaining a campus community that increasingly embraces these core values.\nEach of us is responsible for creating a safer, more inclusive environment.y.\n\n\nAccommodation for Students with Disabilities\nIf you have a documented disability or other condition that may affect academic performance you should: 1) make sure this documentation is on file with the Disability Resource Center (Allen Center, Room 111 / adarice@rice.edu / x5841) to determine the accommodations you need; and 2) talk with me to discuss your accommodation needs.\n\n\nAccommodation for Scheduling Conflicts\nIf any of our class meetings conflict with your religious events, student athletics, or other non-negotiable scheduling conflict, please let me know ASAP so that we can make arrangements for you.\n\n\nMask Policies\nMasks are welcome but not required in the classroom. However, I strongly encourage compliance with requests to mask from students, faculty, and staff who are concerned about the risk of infection. Please be respectful of these concerns and requests and do not ask someone making such a request to disclose their underlying medical condition. If for some reason you need your instructor or classmates to wear a mask, please let me know and I will communicate this to the class without disclosing your identity.\nThese policies may change over the course of the semester as the situation evolves.\n\n\nPolicy on Web Posting of Course Materials\nUploading course materials to web sites is not an authorized use of the course material. Both the poster and the user are in violation of the university policy, which is actionable.\n\n\nAcademic Integrity\nThis class is designed to encourage collaboration, and students are encouraged to discuss their work with other students. Engineering as a profession relies upon the honesty and integrity of its practitioners (see e.g. the American Society for Civil Engineers’ Code of Ethics). All work submitted must represent the students’ own work and understanding, whether individually or as a group (depending on the particulars of the assignment). This includes analyses, code, software runs, and reports.\nMore specifically, all students will be held to the standards of the Rice Honor Code, a code that you pledged to honor when you matriculated at this institution. If you are unfamiliar with the details of this code and how it is administered, you should consult the Honor System Handbook at honor.rice.edu/honor-system-handbook/. This handbook outlines the University’s expectations for the integrity of your academic work, the procedures for resolving alleged violations of those expectations, and the rights and responsibilities of students and faculty members throughout the process.\nIf you are ever unclear about academic integrity, please ask! Additionally, always err on the side of providing more information.)\n\n\nAI/ML Resource Policy\nAI/ML tools, like ChatGPT, can be incredibly powerful aids in learning, and can help beginner programmers with syntax and code structure. However, the use of these tools poses risks including the potential for plagiarism and the potential for students to rely on these tools without developing their own understanding.\nAs noted, all work submitted for a grade in this course must reflect your own understanding. You are welcome to use AI/ML tools to help you learn, but you must describe how you used the tool when you turn in your assignment. Moreover, you should not submit code that you do not understand as you be held responsible for explaining any code you submit. For more, see our page on LLMs."
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\nLabs: 10%\nOn most Fridays we will use class time for hands-on programming exercises (“labs”) to give you guided practice applying the concepts and methods from class. These labs will be announced on the course website ahead of time so anyone who is able can bring a laptop to class. These labs can be done in groups; if you cannot bring a laptop to class for whatever reason, you will be able to (and are encouraged to) work with other students, though you must turn in your own assignment for grading.\nSome details on lab logistics:\n\nLabs will be designed to be completed in class, but you may occasionally require additional time to complete them.\nLabs will be graded on a 3-point scale: strong (3/3), acceptable (2/3), lacking (1/3), or missing (0/3).\nDetailed solutions will be provided and you will be responsible for reviewing them on your own. Material covered on labs may be covered in tests.\n\n\n\nTests: 40%\nIn-class written exams will be given for each of the four modules of the course, on the dates listed on the schedule. Tests will cover material from lectures and labs, and we will dedicate a class to review before each exam.\nBased on past experience, students enter the class with a wide range of backgrounds and experience. The tests are designed so that students who meet the pre-requisites, but do not have extensive additional experience, can do well. Students with backgrounds that exceed the minimum pre-requisites may find the tests relatively straightforward.\n\n\nProjects: 40%\nModules 2-4 will culminate with a project designed to apply the tools we learn in class to a real-world problem. These projects will be introduced at the start of each module, will motivate the material we cover in class, and give you an opportunity to apply the methods we learn to a problem of your choosing. Projects also offer an opportunity for students with more experience to dig deeper.\nSpecific instructions and rubrics will be provided for each project. You will submit your projects as a Quarto notebook (.qmd file) on Canvas using the provided GitHub classroom link.\n\n\nParticipation: 10%\nParticipating fully in the class allows you to gain more from the class and contribute more to the learning of your classmates. Some ways to participate include:\n\nAttending every class\nAsking questions in class\nAnswering questions on Canvas\nComing to office hours\n\nYou will be asked to evaluate your own participation over the course of the semester, and I will provide feedback on your participation as well\n\n\nLate Work Policy\n\nLate projects will be subjected to a 10% penalty per day, which can accumulate to 100% of the total grade.\nLate labs will not be accepted, because we will discuss solutions in class.\nSometimes things come up in life. Please reach out ahead of time if you have extenuating circumstances (including University-approved absences or illnesses) which would make it difficult for you to submit your work on time. Work which would be late for appropriate reasons will be given extensions and the late penalty will be waived."
  },
  {
    "objectID": "tutorials/llm.html",
    "href": "tutorials/llm.html",
    "title": "Tutorial: Responsible use of large language models",
    "section": "",
    "text": "Large language models (LLMs), like GPT, are powerful tools for generating text that can be used for coding and doing data analysis. This is at once empowering (LLMs are powerful and can save you time) and risky (LLMs can make mistakes that are hard to detect).\nOur general view is that LLMs are powerful tools that you will encounter and use when you leave this classroom, so it’s important to learn how to use them responsibly and effectively. As described in the syllabus, you are generally permitted to use LLMs in this course, but ultimately, you are responsible for guaranteeing, understanding, and interpreting your results, and you can’t do this if you don’t understand the code that you are running (this isn’t exclusive to code generated by LLMs – it also applies to code that you copy from the internet!).\nThe use of LLMs for coding is a new and rapidly evolving area. Rather than provide a lesson plan for you, this page will provide some resources for self-learning."
  },
  {
    "objectID": "tutorials/llm.html#links-and-resources",
    "href": "tutorials/llm.html#links-and-resources",
    "title": "Tutorial: Responsible use of large language models",
    "section": "Links and resources",
    "text": "Links and resources\n\nBlog: “Bob Carpenter thinks GPT-4 is awesome”: this post highlights how GPT-4 is able to write a program in Stan, a statistical programming language, and also the mistakes that it makes. Finding and correcting these mistakes requires knowing the Stan language and having a deep understanding of the statistical model, but someone with this expertise could potentially use GPT-4 to accelerate their coding workflow. The comments are also interesting and insightful.\nGitHub Copilot is an extension for VS Code that can provide suggestions for code completion and editing. It is free for students and educators.\nAI Snake Oil is a blog that seeks to dispel hype, remove misconceptions, and clarify the limits of AI. The authors are in the Princeton University Department of Computer Science."
  },
  {
    "objectID": "tutorials/quarto.html",
    "href": "tutorials/quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "In this tutorial, you will learn how to typeset mathematics and equations in Jupyter notebooks using LaTeX."
  },
  {
    "objectID": "tutorials/quarto.html#overview",
    "href": "tutorials/quarto.html#overview",
    "title": "Quarto",
    "section": "",
    "text": "In this tutorial, you will learn how to typeset mathematics and equations in Jupyter notebooks using LaTeX."
  },
  {
    "objectID": "tutorials/quarto.html#further-resourcesw",
    "href": "tutorials/quarto.html#further-resourcesw",
    "title": "Quarto",
    "section": "Further Resourcesw",
    "text": "Further Resourcesw\n\nMarkdown Cheatsheet\nLaTeX Cheatsheet\nMathpix Snpi allows you to convert images of equations to LaTeX code (there is a free tier)\nDetexify lets you draw a symbol and suggests the LaTeX code for the corresponding symbol\n\nThis tutorial was inspired and draws from Justin Bois’ tutorial."
  },
  {
    "objectID": "tutorials/quarto.html#inline-mathematics",
    "href": "tutorials/quarto.html#inline-mathematics",
    "title": "Quarto",
    "section": "Inline Mathematics",
    "text": "Inline Mathematics\nTo include mathematical notation within text, enclose the LaTeX within dollar signs $. For example, to obtain the output\n\nthe objective function is \\(4x + 7x\\),\n\nyou would enter\n\nthe objective function is $4x + 7x$.\n\nYou can enter subscripts and superscripts with _ and ^, respectively; to get\n\nthe function is \\(f(x_i) = x_i^2\\),\n\ntype\n\nthe function is $f(x_i) = x_i^2$.\n\nIf you want multiple characters to be enclosed in a subscript or superscript, enclose them in braces {}:\n\n\\(e^{i \\pi} - 1 = 0\\) is produced by\n\n\n$e^{i \\pi} - 1 = 0$.\n\nTo get special characters like \\(\\pi\\) (or other Greek letters), precede their name (or sometimes a code) with a backslash: $\\pi$. There are a number of special characters like this, which you can find in cheatsheets like this one.\nBold characters, which you might use to denote vectors, can be rendered using \\mathbf:\n\n\\(\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\\)\n\n\n$\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i$\n\nFractions can be displayed using \\frac{}{}, where the first bracket encloses the numerator and the second the denominator, as in\n\n\\(\\frac{1}{2}\\)\n\n\n$\\frac{1}{2}$"
  },
  {
    "objectID": "tutorials/quarto.html#displaying-equations",
    "href": "tutorials/quarto.html#displaying-equations",
    "title": "Quarto",
    "section": "Displaying Equations",
    "text": "Displaying Equations\nTo place equations or other mathematics on their own line(s), enclose the entire block in two dollar signs $$. For example, the prior dot-product definition could be displayed as \\[\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\n\\] using\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\n$$\nDisplaying equations on their own line(s) can improve the spacing of symbols like sums (as above) or fractions: compare the inline\n\n\\(x &lt; \\frac{1}{2}\\)\n\nto \\[\nx &lt; \\frac{1}{2}.\n\\]\nTo display multiple related lines in a single block, there are two environments of note. The first will center all of the equations, and is obtained by enclosing the equations in \\begin{gather} and \\end{gather}. Each line should be separated with \\\\:\n\\[\n\\begin{gather}\nx_1 + x_2 \\leq 5 \\\\\ny \\leq \\frac{1}{2}.\n\\end{gather}\n\\]\n$$\n\\begin{gather}\nx_1 + x_2 \\leq 5 \\\\\ny \\leq \\frac{1}{2}.\n\\end{gather}\n$$\nThe second environment will let you align the equations as you wish instead of automatically centering them, and is used by enclosing the equations with \\begin{align} and \\end{align}, with an ampersand & in front of the characters which will be used on each line to align the equations:\n\\[\n\\begin{align}\nx_1 + x_2 &\\leq 5 \\\\\ny &\\leq \\frac{1}{2}.\n\\end{align}\n\\]\n$$\n\\begin{align}\nx_1 + x_2 &\\leq 5 \\\\\ny &\\leq \\frac{1}{2}.\n\\end{align}\n$$"
  },
  {
    "objectID": "tutorials/quarto.html#sizing-parentheses-or-brackets",
    "href": "tutorials/quarto.html#sizing-parentheses-or-brackets",
    "title": "Quarto",
    "section": "Sizing Parentheses or Brackets",
    "text": "Sizing Parentheses or Brackets\nBy default, parentheses and brackets are sized for simple characters, but will look bad when used to surround fractions or sums, particularly when they are not used in-line: \\[\nx_n = (\\frac{1}{2})^n.\n\\] To make this look better, use \\left and \\right around the left and right parentheses or brackets: \\[\nx_n = \\left(\\frac{1}{2}\\right)^n\n\\]\n$$\nx_n = \\left(\\frac{1}{2}\\right)^n.\n$$\nThis is totally optional, but helps!"
  },
  {
    "objectID": "tutorials/quarto.html#using-latex-in-figures",
    "href": "tutorials/quarto.html#using-latex-in-figures",
    "title": "Quarto",
    "section": "Using LaTeX in Figures",
    "text": "Using LaTeX in Figures\nYou may want to use LaTeX in figures, for example if your \\(x\\)-axis should have a title like \\(x\\). To do this, load the LaTeXStrings package and precede the relevant LaTeX-formatted string (within in-line dollar signs $) with L, as in:\n\nusing Plots\nusing LaTeXStrings\n\nx = (-2π):0.01:(2π)\nplot(x, exp.(sin.(x)); xlabel=L\"$x$\", ylabel=L\"$e^{\\sin(x)}$\", legend=false)"
  },
  {
    "objectID": "tutorials/github.html",
    "href": "tutorials/github.html",
    "title": "GitHub Resources",
    "section": "",
    "text": "Git Basics from The Odin Project.\nLearn Git Branching: An interactive, visual tutorial to how git works.\nVersion Control from MIT’s “CS: Your Missing Semester” course.\nGit and GitHub for Poets: YouTube playlist covering the basics of git and GitHub."
  },
  {
    "objectID": "tutorials/github.html#helpful-resources",
    "href": "tutorials/github.html#helpful-resources",
    "title": "GitHub Resources",
    "section": "",
    "text": "Git Basics from The Odin Project.\nLearn Git Branching: An interactive, visual tutorial to how git works.\nVersion Control from MIT’s “CS: Your Missing Semester” course.\nGit and GitHub for Poets: YouTube playlist covering the basics of git and GitHub."
  },
  {
    "objectID": "slides/lecture02-distributions.html#a-quick-note-on-pacing",
    "href": "slides/lecture02-distributions.html#a-quick-note-on-pacing",
    "title": "Introduction to statistics and probability distributions",
    "section": "A quick note on pacing",
    "text": "A quick note on pacing\nWe will move through this module (“fundamentals”) at a fairly brisk pace\n\nReview course slides\nAsk questions on Canvas or in office hours\nTo help you learn to code, I am exposing you to code early and often\n\nI don’t expect that you are able to replicate all the code in this notebook\nI have added annotations where appropriate\nThe labs will give you practice\nYou will not need to write code from scratch for the exams\n\n\n\nThis is a long slide deck. We will probably finish on Wednesday"
  },
  {
    "objectID": "slides/lecture02-distributions.html#what-is-a-package",
    "href": "slides/lecture02-distributions.html#what-is-a-package",
    "title": "Introduction to statistics and probability distributions",
    "section": "What is a package?",
    "text": "What is a package?\n\nCode that is bundled for easy use\nProvides functionality that is not part of the base language\n\nMost stuff in Julia requires packages, as we will see\n\nNeed to be installed\nDeveloped by the community"
  },
  {
    "objectID": "slides/lecture02-distributions.html#where-do-i-get-packages",
    "href": "slides/lecture02-distributions.html#where-do-i-get-packages",
    "title": "Introduction to statistics and probability distributions",
    "section": "Where do I get packages?",
    "text": "Where do I get packages?\n\nJulia has a built-in package manager for installing add-on functionality written in Julia. It can also install external libraries using your operating system’s standard system for doing so, or by compiling from source."
  },
  {
    "objectID": "slides/lecture02-distributions.html#where-are-packages-stored",
    "href": "slides/lecture02-distributions.html#where-are-packages-stored",
    "title": "Introduction to statistics and probability distributions",
    "section": "Where are packages stored?",
    "text": "Where are packages stored?\nEach project has an *environment, which is defined by the following files (do not edit them manually):\n\nProject.toml: lists the specified dependencies of the project\nManifest.toml: lists the exact versions of the packages that are used in the project\n\nThe actual packages are stored on your computer and you don’t need to worry"
  },
  {
    "objectID": "slides/lecture02-distributions.html#workflow-activate",
    "href": "slides/lecture02-distributions.html#workflow-activate",
    "title": "Introduction to statistics and probability distributions",
    "section": "Workflow: activate",
    "text": "Workflow: activate\nWe activate a project to tell Julia that we want to use the packages in that project. These steps are equivalent:\n\n\n\nOpen the REPL\nusing Pkg\nPkg.activate(\".\")\n\n\n\nOpen the REPL\nPress ] to enter the package manager\nactivate ."
  },
  {
    "objectID": "slides/lecture02-distributions.html#workflow-install",
    "href": "slides/lecture02-distributions.html#workflow-install",
    "title": "Introduction to statistics and probability distributions",
    "section": "Workflow: install",
    "text": "Workflow: install\nWe add a package to install it in the current project\n\n\n\nOpen the REPL\nusing Pkg\nPkg.add(\"DataFrames\")\n\n\n\nOpen the REPL\nPress ] to enter the package manager\nadd DataFrames"
  },
  {
    "objectID": "slides/lecture02-distributions.html#workflow-instantiate",
    "href": "slides/lecture02-distributions.html#workflow-instantiate",
    "title": "Introduction to statistics and probability distributions",
    "section": "Workflow: instantiate",
    "text": "Workflow: instantiate\nWhen working with someone else’s project, we need to install the packages that they use.\n\nactivate does not install anything, just tells Julia which packages to use\ninstantiate is your friend to make sure an environment is ready to use. If there’s nothing to do, instantiate does nothing."
  },
  {
    "objectID": "slides/lecture02-distributions.html#learn-more",
    "href": "slides/lecture02-distributions.html#learn-more",
    "title": "Introduction to statistics and probability distributions",
    "section": "Learn more",
    "text": "Learn more\n\nPkg.jl docs\n\nSee “Using someone else’s projecg” for more on instantiate\n\nWell-worked blog post by Julies Krumbiegel"
  },
  {
    "objectID": "slides/lecture02-distributions.html#lab-01-issues",
    "href": "slides/lecture02-distributions.html#lab-01-issues",
    "title": "Introduction to statistics and probability distributions",
    "section": "Lab 01 issues",
    "text": "Lab 01 issues\n\n\nBe sure to submit your assignment\nCanvas discussion: “Lab 01 Discussion”\nERROR: Jupyter kernel 'julia-1.9' not found. x4"
  },
  {
    "objectID": "slides/lecture02-distributions.html#lab-01-fix",
    "href": "slides/lecture02-distributions.html#lab-01-fix",
    "title": "Introduction to statistics and probability distributions",
    "section": "Lab 01 fix",
    "text": "Lab 01 fix\n\nIn order to run codes using Quarto, you need the IJulia package\n\nListed in Manifest.toml but you need to instantiate\n\nIf that doesn’t work:\n\nRun Pkg.build(\"IJulia\") in the REPL (after you activate and instantiate)\n\nI’ve updated the instructions"
  },
  {
    "objectID": "slides/lecture02-distributions.html#stats-without-the-agonizing-details",
    "href": "slides/lecture02-distributions.html#stats-without-the-agonizing-details",
    "title": "Introduction to statistics and probability distributions",
    "section": "Stats without the agonizing details",
    "text": "Stats without the agonizing details\nIn this class we will use computation and simulation to build fundamental insight into statistical processes without dwelling on “agonizing” details."
  },
  {
    "objectID": "slides/lecture02-distributions.html#motivating-question",
    "href": "slides/lecture02-distributions.html#motivating-question",
    "title": "Introduction to statistics and probability distributions",
    "section": "Motivating question",
    "text": "Motivating question\n\nDoes drinking beer reduce the likelihood of being bitten by mosquitos?"
  },
  {
    "objectID": "slides/lecture02-distributions.html#raw-data",
    "href": "slides/lecture02-distributions.html#raw-data",
    "title": "Introduction to statistics and probability distributions",
    "section": "Raw data",
    "text": "Raw data\nCreate a variable called beer to hold the number of mosquito bites for beer drinkers:\n\nbeer = [27, 20, 21, 26, 27, 31, 24, 21, 20, 19, 23, 24, 28, 19, 24, 29, 18, 20, 17, 31, 20, 25, 28, 21, 27]\n\n25-element Vector{Int64}:\n 27\n 20\n 21\n 26\n 27\n 31\n 24\n 21\n 20\n 19\n 23\n 24\n 28\n 19\n 24\n 29\n 18\n 20\n 17\n 31\n 20\n 25\n 28\n 21\n 27"
  },
  {
    "objectID": "slides/lecture02-distributions.html#what-is-beer",
    "href": "slides/lecture02-distributions.html#what-is-beer",
    "title": "Introduction to statistics and probability distributions",
    "section": "What is beer?",
    "text": "What is beer?\nWe can learn a bit more about it:\n\ntypeof(beer)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\nlength(beer)\n\n25\n\n\n\nsize(beer)\n\n(25,)\n\n\n\nsum(beer) / length(beer) # the sample average\n\n23.6"
  },
  {
    "objectID": "slides/lecture02-distributions.html#more-raw-data",
    "href": "slides/lecture02-distributions.html#more-raw-data",
    "title": "Introduction to statistics and probability distributions",
    "section": "More raw data",
    "text": "More raw data\nWe can do the same for water drinkers:\n\n1water = [21, 22, 15, 12, 21, 16, 19, 15, 22, 24, 19, 23, 13, 22, 20, 24, 18, 20];\n\n\n1\n\nBy putting the ; at the end of our statement, we keep the notebook from showing the output"
  },
  {
    "objectID": "slides/lecture02-distributions.html#a-simple-analysis",
    "href": "slides/lecture02-distributions.html#a-simple-analysis",
    "title": "Introduction to statistics and probability distributions",
    "section": "A simple analysis",
    "text": "A simple analysis\nLet’s calculate the difference between the average number of bites in each group.\n\n1using StatsBase: mean\n\nobserved_diff = mean(beer) - mean(water)\nobserved_diff\n\n\n1\n\nThis gives us the mean function from the StatsBase package\n\n\n\n\n4.37777777777778"
  },
  {
    "objectID": "slides/lecture02-distributions.html#the-skeptics-argument",
    "href": "slides/lecture02-distributions.html#the-skeptics-argument",
    "title": "Introduction to statistics and probability distributions",
    "section": "The skeptic’s argument",
    "text": "The skeptic’s argument\nThe skeptic asks whether this might be random chance.\n\n\nWe could answer this with a T test\n\nDetermine if there is a significant difference between the means of two groups\nAssumes (approximate) normality\nAssumptions hidden behind a software package\n\nSimulation approach:\n\nSuppose the skeptic is right – the two groups are samped from the same distribution\nShuffle the data (randomly divide into two groups by assuming that there is no difference between the two groups)\nCalculate the difference between each group\nRepeat many times and examine the distribution of differences\n\n\n\n\nMake clear that we want to relax our assumptions and to simplify the analysis. Some of the things T tests make you think about, like whether data is paired or not, whether the variances are equal, whether you want one or two direction, etc are important and figure into the design of your simulation approach."
  },
  {
    "objectID": "slides/lecture02-distributions.html#implementation",
    "href": "slides/lecture02-distributions.html#implementation",
    "title": "Introduction to statistics and probability distributions",
    "section": "Implementation",
    "text": "Implementation\n\n1using Random: shuffle\n\n2function get_shuffled_difference(y1, y2)\n\n    # concatenate the data into one vector, then shuffle it\n    y_all = vcat(y1, y2)\n    y_shuffled = shuffle(y_all)\n\n    # create groups consistent w/ skeptic's argument\n    N1 = length(y1) # how many obs in the first vector?\n    ynew1 = y_shuffled[1:N1]\n    ynew2 = y_shuffled[(N1+1):end]\n\n    # get the difference\n    difference = mean(ynew1) - mean(ynew2)\n    return difference\n3end\n\n4get_shuffled_difference(beer, water)\n\n\n1\n\nUse the shuffle function from the Random package\n\n2\n\nDefine a function. Its arguments are y1 and y2\n\n3\n\nend closes the function definition\n\n4\n\nCall the function with our data\n\n\n\n\n-2.31111111111111"
  },
  {
    "objectID": "slides/lecture02-distributions.html#running",
    "href": "slides/lecture02-distributions.html#running",
    "title": "Introduction to statistics and probability distributions",
    "section": "Running",
    "text": "Running\nWe want to learn about the sampling distribution of the group differences: repeat this experiment many times over and plott the results\n\n1simulated_diffs = [get_shuffled_difference(beer, water) for i in 1:50_000]\n2length(simulated_diffs)\n\n\n1\n\nThis is a list comprehension. It’s a way to create a list by looping over something. Here, we loop over the numbers 1 to 50,000 and call get_shuffled_difference each time.\n\n2\n\nlength tells us the size of a vector\n\n\n\n\n50000"
  },
  {
    "objectID": "slides/lecture02-distributions.html#plotting",
    "href": "slides/lecture02-distributions.html#plotting",
    "title": "Introduction to statistics and probability distributions",
    "section": "Plotting",
    "text": "Plotting\n\n1using Plots\n\n2function plot_diffs(diffs, obs)\n3    p = histogram(\n4        diffs;\n5        xlabel=\"Difference\",\n6        ylabel=\"Proportion of samples\",\n7        label=\"If Skeptic is Right\",\n8        bins=-6:0.5:6,\n9        legend=:topleft,\n10        normalize=true,\n    )\n11    vline!(p, [obs]; label=\"Observed\", linewidth=2)\n12    return p\nend\nplot_diffs(simulated_diffs, observed_diff)\n\n\n1\n\nWe need the Plots package to make plots\n\n2\n\nDefine a function. Its arguments are diffs and obs\n\n3\n\nhistogram is a function from the Plots package\n\n4\n\nCreate a histogram using the diffs object. ; separates the positional arguments from the keyword arguments\n\n5\n\nxlabel is a “keyword argument” specifying the text for the x-axis label\n\n6\n\nthe y-axis label\n\n7\n\nthe label to use in the legend\n\n8\n\nspecify the bins to use in the histogram\n\n9\n\nspecify the location of the legend\n\n10\n\nnormalize the histogram so that the area under the curve is 1\n\n11\n\nadd a vertical line (vline!) at the observed difference\n\n12\n\nmany functions return their output – in this case the plot we created from the inputs"
  },
  {
    "objectID": "slides/lecture02-distributions.html#alternative",
    "href": "slides/lecture02-distributions.html#alternative",
    "title": "Introduction to statistics and probability distributions",
    "section": "Alternative",
    "text": "Alternative\nWe could have done this with a parametric test\n\n1using HypothesisTests\n\n2t1 = HypothesisTests.EqualVarianceTTest(beer, water)\n3t2 = HypothesisTests.UnequalVarianceTTest(beer, water);\n\n\n1\n\nWe need the HypothesisTests package\n\n2\n\nWe don’t need to include the HypothesisTests., but it adds clarity\n\n3\n\nRecall: ; suppresses output\n\n\n\n\n\n\n\nt1\n\nTwo sample t-test (equal variance)\n----------------------------------\nPopulation details:\n    parameter of interest:   Mean difference\n    value under h_0:         0\n    point estimate:          4.37778\n    95% confidence interval: (1.913, 6.843)\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           0.0009\n\nDetails:\n    number of observations:   [25,18]\n    t-statistic:              3.5869843832143413\n    degrees of freedom:       41\n    empirical standard error: 1.220461900604875\n\n\n\n\nt2\n\nTwo sample t-test (unequal variance)\n------------------------------------\nPopulation details:\n    parameter of interest:   Mean difference\n    value under h_0:         0\n    point estimate:          4.37778\n    95% confidence interval: (1.957, 6.798)\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           0.0007\n\nDetails:\n    number of observations:   [25,18]\n    t-statistic:              3.658244539721401\n    degrees of freedom:       39.11341478045414\n    empirical standard error: 1.196688119190407"
  },
  {
    "objectID": "slides/lecture02-distributions.html#discussion",
    "href": "slides/lecture02-distributions.html#discussion",
    "title": "Introduction to statistics and probability distributions",
    "section": "Discussion",
    "text": "Discussion\n\n\nThis is called a bootstrap and is a very powerful tool in many situations\nWhat would we expect to see if the skeptic was correct?\nP-value:\n\nthe likelihood of the data if the null hypothesis is correct\nskeptic’s (null) hypothesis: no difference between groups\n\n\n\n\n\n1mean(simulated_diffs .&gt;= observed_diff)\n\n\n1\n\n. is the dot operator. It applies the function to each element of the vector individually.\n\n\n\n\n0.0006"
  },
  {
    "objectID": "slides/lecture02-distributions.html#the-normal-distribution",
    "href": "slides/lecture02-distributions.html#the-normal-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "The Normal distribution",
    "text": "The Normal distribution\nThe Normal (Gaussian) distribution has probability distribution function:\n\\[\np(y | \\mu, \\theta) = \\frac{1}{\\sigma\\sqrt{2\\pi}} \\exp\n\\left(\n-\\frac{1}{2}\\left(\n\\frac{x-\\mu}{\\sigma}\n\\right)^{\\!2}\n\\,\n\\right)\n\\]\n\nMean \\(\\mu\\)\n\nMedian equal to mean\n\nVariance \\(\\sigma^2\\)\nSymmetric"
  },
  {
    "objectID": "slides/lecture02-distributions.html#central-limit-theorem",
    "href": "slides/lecture02-distributions.html#central-limit-theorem",
    "title": "Introduction to statistics and probability distributions",
    "section": "Central limit theorem",
    "text": "Central limit theorem\nThe central limit theorem says that the sum of many independent random variables is approximately normally distributed.\nWe can see this with an example:\n\nFor each sample \\(i = 1, \\ldots, N\\):\n\nDraw J draws from a non-Gaussian distribution \\(\\mathcal{D}\\)\nTake the mean and save it as \\(\\bar{y}_i\\)\n\nPlot the distribution of \\(\\bar{y}_i\\)\n\n\nusing Distributions\n\ndist = Gamma(2, 1) # a non-Gaussian distribution\nN = 10_000 # number of samples\nJ = 500 # draws per sample\n1ȳ = [\n    mean(rand(dist, J))\n2    for _ ∈ 1:N\n3]\nhistogram(\n    ȳ;\n    xlabel=\"Sample mean\",\n    ylabel=\"Proportion of samples\",\n    normalize=true,\n    label=false,\n)\n\n\n1\n\nTo type ȳ, type y then type \\bar and hit tab. Julia allows unicode (or emojis) in variable names\n\n2\n\nTo type ∈ , type \\in and hit tab. The _ isn’t doing anything special and we could name it i or 😶 or whatever we want but _ suggests it’s a throwaway\n\n3\n\nThis is another list comprehension"
  },
  {
    "objectID": "slides/lecture02-distributions.html#notation",
    "href": "slides/lecture02-distributions.html#notation",
    "title": "Introduction to statistics and probability distributions",
    "section": "Notation",
    "text": "Notation\nWe will get tired of writing\n\\[\np(y | \\mu, \\theta) = \\frac{1}{\\sigma\\sqrt{2\\pi}} \\exp\n\\left(\n-\\frac{1}{2}\\left(\n\\frac{x-\\mu}{\\sigma}\n\\right)^{\\!2}\n\\,\n\\right)\n\\]\nInstead, we will often use shorthand:\n\\[\ny \\sim \\mathcal{N}(\\mu, \\sigma^2)\n\\]"
  },
  {
    "objectID": "slides/lecture02-distributions.html#normal-pdf",
    "href": "slides/lecture02-distributions.html#normal-pdf",
    "title": "Introduction to statistics and probability distributions",
    "section": "Normal PDF",
    "text": "Normal PDF\n\nusing StatsPlots\nusing LaTeXStrings\nusing Distributions\n\nplot(\n    Normal(0, 1);\n    label=\"Normal Distribution\",\n1    xlabel=L\"$x$\",\n2    ylabel=L\"$p(x | \\mu=0, \\sigma=1)$\",\n)\n\n\n1\n\nL\"&lt;string&gt;\" allows us to use LaTeX in strings\n\n2\n\nThis notation specifies the values of \\(\\mu\\) and \\(\\sigma\\)"
  },
  {
    "objectID": "slides/lecture02-distributions.html#bernoulli-distribution",
    "href": "slides/lecture02-distributions.html#bernoulli-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "Bernoulli distribution",
    "text": "Bernoulli distribution\nA Bernoulli distribution models a coin flip.\n\np = 0.5 # probability of heads\n1rand(Bernoulli(p), 5)\n\n\n1\n\nDraw 5 samples from the Bernoulli distribution with parameter p\n\n\n\n\n5-element Vector{Bool}:\n 1\n 0\n 1\n 1\n 0"
  },
  {
    "objectID": "slides/lecture02-distributions.html#binomial-distribution",
    "href": "slides/lecture02-distributions.html#binomial-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "Binomial distribution",
    "text": "Binomial distribution\nA Binomial distribution models the distribution of n consecutive flips of the same coin\n\np = 0.5\nN = 5\nrand(Binomial(N, p), 5)\n\n5-element Vector{Int64}:\n 1\n 1\n 1\n 2\n 0"
  },
  {
    "objectID": "slides/lecture02-distributions.html#multinomial-distribution",
    "href": "slides/lecture02-distributions.html#multinomial-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "Multinomial distribution",
    "text": "Multinomial distribution\nThe Multinomial extends the Binomial to multiple categories. Note that p is a vector. If there are 2 categories (\\(K=2\\)), it’s just the binomial with \\(p_\\text{multinomial} = [p, 1-p]\\).”\n\np = [0.5, 0.3, 0.2]\nN = 5\ndist = Multinomial(N, p)\n1rand(dist, 5)\n\n\n1\n\nTo be more concise, we could write rand(Multinimial([0.5, 0.3, 0.2], 5), 5). Which is more readable?\n\n\n\n\n3×5 Matrix{Int64}:\n 3  2  3  3  1\n 2  1  0  2  3\n 0  2  2  0  1"
  },
  {
    "objectID": "slides/lecture02-distributions.html#poisson-distribution",
    "href": "slides/lecture02-distributions.html#poisson-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "Poisson distribution",
    "text": "Poisson distribution\nThe Poisson distribution is used to model count data. It is the limit of a Binomial distribution with \\(p=\\lambda/N\\), as \\(N \\rightarrow \\infty\\).\nA Poisson distribution has mean and variance equal to \\(\\lambda\\).\n\n1dist = Poisson(2.5)\n2rand(dist, 10)\n\n\n1\n\nThe Poisson distribution has one parameter, \\(\\lambda\\)\n\n2\n\nDraw 10 samples from the Poisson distribution\n\n\n\n\n10-element Vector{Int64}:\n 5\n 2\n 1\n 3\n 8\n 1\n 3\n 3\n 1\n 1"
  },
  {
    "objectID": "slides/lecture02-distributions.html#negative-binomial-distribution",
    "href": "slides/lecture02-distributions.html#negative-binomial-distribution",
    "title": "Introduction to statistics and probability distributions",
    "section": "Negative binomial distribution",
    "text": "Negative binomial distribution\nThe NegativeBinomaial distribution relaxes the Poisson’s assumotion that \\(\\text{mean} = \\text{variance}\\).\nThis distribution models the number of successes in a sequence of independent and identically distributed Bernoulli trials with probability p before a specified (non-random) number of failures (r) occurs. For example, we can define rolling a 6 on a dice as a failure, and rolling any other number as a success, and ask how many successful rolls will occur before we see the third failure (p = 1/6 and r = 3)."
  },
  {
    "objectID": "slides/lecture02-distributions.html#what-other-distributions-do-you-know",
    "href": "slides/lecture02-distributions.html#what-other-distributions-do-you-know",
    "title": "Introduction to statistics and probability distributions",
    "section": "What other distributions do you know?",
    "text": "What other distributions do you know?\n\n\nUniform\nExponential\nGamma (see above)\nBeta\nPareto\nStudent t\nBoltzmann\nMany more!"
  },
  {
    "objectID": "slides/lecture02-distributions.html#mean",
    "href": "slides/lecture02-distributions.html#mean",
    "title": "Introduction to statistics and probability distributions",
    "section": "Mean",
    "text": "Mean\nThe mean of a sample is just the sample average: \\[\n\\bar{y} = \\frac{1}{N} \\sum_{i=1}^N y_i\n\\]\n\nThe mean of a distribution is the expected value of the distribution: \\[\n\\mathbb{E}(u) = \\int u p(u) \\, du\n\\]"
  },
  {
    "objectID": "slides/lecture02-distributions.html#variance",
    "href": "slides/lecture02-distributions.html#variance",
    "title": "Introduction to statistics and probability distributions",
    "section": "Variance",
    "text": "Variance\nVariance measures how points differ from the mean\n\nYou may be familiar with sample variance: \\[\nS^2 = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})^2}{n - 1}\n\\]\n\n\nFor a distribution: \\[\n\\mathbb{V}(u) = \\int (u - \\mathbb{E}(u))^2 p(u) \\, du\n\\] or, for a vector \\[\n\\mathbb{V}(u) = \\int (u - \\mathbb{E}(u)) (u - \\mathbb{E}(u))^T p(u) \\, du\n\\]"
  },
  {
    "objectID": "slides/lecture02-distributions.html#coming-up",
    "href": "slides/lecture02-distributions.html#coming-up",
    "title": "Introduction to statistics and probability distributions",
    "section": "Coming up",
    "text": "Coming up\n\nWednesday: working with probability distributions\nFriday:\n\nLab 02: Working with tabular data in Julia\nLab 01 due at start of class"
  },
  {
    "objectID": "slides/lecture02-distributions.html#office-hours",
    "href": "slides/lecture02-distributions.html#office-hours",
    "title": "Introduction to statistics and probability distributions",
    "section": "Office hours",
    "text": "Office hours\nIf you haven’t filled out the Doodle, please do so ASAP\n\n\nCEVE 543, Data Science for Climate Risk Assessment"
  },
  {
    "objectID": "slides/lecture01-climate.html#sizing-a-stormwater-pipe",
    "href": "slides/lecture01-climate.html#sizing-a-stormwater-pipe",
    "title": "What drives uncertain climate hazard?",
    "section": "Sizing a stormwater pipe",
    "text": "Sizing a stormwater pipe\n\n\n\n\nRainfall-runoff model\n\ne.g., peak flow from rational method: \\(Q = CiA\\)\n\\(i\\) is rainfall intensity, \\(A\\) is area, and \\(C\\) is runoff coefficient\n\nDesign rainfall based on return period \\(T\\)\n\n\\(p(i &gt; i^*) = 1/T\\)\n\nSize your culvert to handle \\(Q^* = Ci^*A\\)\nRequires knowing \\(p(i)\\)!\n\n\n\n\n\n\nDrainage installation"
  },
  {
    "objectID": "slides/lecture01-climate.html#floodplain-mapping-in-a-riverine-system",
    "href": "slides/lecture01-climate.html#floodplain-mapping-in-a-riverine-system",
    "title": "What drives uncertain climate hazard?",
    "section": "Floodplain mapping in a riverine system",
    "text": "Floodplain mapping in a riverine system\n\n\n\nThis is a moderately simplified workflow\n\n\n\nAnalyze historical streamflow data at a gauge\nTake the 99th percentile (100 year return level) of annual maximum streamflows\nUse a hydraulic model to model where the water goes\n\n\n\n\n\n\nFloodplain in Selinsgrove, PA"
  },
  {
    "objectID": "slides/lecture01-climate.html#reservoir-sizing-simplest-version",
    "href": "slides/lecture01-climate.html#reservoir-sizing-simplest-version",
    "title": "What drives uncertain climate hazard?",
    "section": "Reservoir sizing (simplest version)",
    "text": "Reservoir sizing (simplest version)\n\n\nConsider \\(N\\) years of inflows (and releases, evaporation, etc)\nCount number of times reservoir is empty (“failure”)\nRepeat experiment many different times with different inflows\nIf you are sampling this from \\(p(\\text{inflow})\\), you can estimate the reliability\n\nMonte Carlo method\nWhy not just use observed inflows?"
  },
  {
    "objectID": "slides/lecture01-climate.html#index-insurance-pricing",
    "href": "slides/lecture01-climate.html#index-insurance-pricing",
    "title": "What drives uncertain climate hazard?",
    "section": "Index insurance pricing",
    "text": "Index insurance pricing\n\n\nIndex insurance: if some index \\(I\\) is above a threshold \\(I^*\\), pay out \\(X\\)\n\nTotal rainfall in a season, area flooded, etc\n\nLet \\(p^* = p(I &gt; I^*)\\) is the probability of a payout\nNaive pricing: \\(R = p^* X\\)\nRisk premium: \\(R = X \\left( \\mathbb{E}[p^*] + \\lambda \\mathbb{V}^{1/2}[p^*] \\right)\\)"
  },
  {
    "objectID": "slides/lecture01-climate.html#other-examples",
    "href": "slides/lecture01-climate.html#other-examples",
    "title": "What drives uncertain climate hazard?",
    "section": "Other examples",
    "text": "Other examples\n\n\nSeasonal electricity resource adequacy (Doss-Gollin et al., 2021)\nLevee design (Garner & Keller, 2018)\nWater supply planning (Fletcher et al., 2019)\nMultihazard design (Bruneau et al., 2017)\netc…"
  },
  {
    "objectID": "slides/lecture01-climate.html#important-note",
    "href": "slides/lecture01-climate.html#important-note",
    "title": "What drives uncertain climate hazard?",
    "section": "Important note",
    "text": "Important note\nAll of these workflows are slightly simplified, but communicate the main idea. For each of these motivating problems, we need to know the probability distribution of some hazard – \\(p(\\bf{s})\\) to use our notation from last class"
  },
  {
    "objectID": "slides/lecture01-climate.html#storms-on-the-north-sea",
    "href": "slides/lecture01-climate.html#storms-on-the-north-sea",
    "title": "What drives uncertain climate hazard?",
    "section": "Storms on the North Sea",
    "text": "Storms on the North Sea\n\n\n\n\n\nWaves\n\n\n\n\n\n\nSynoptic Forecast"
  },
  {
    "objectID": "slides/lecture01-climate.html#storm-surge-in-houston",
    "href": "slides/lecture01-climate.html#storm-surge-in-houston",
    "title": "What drives uncertain climate hazard?",
    "section": "Storm surge in Houston",
    "text": "Storm surge in Houston\n\n\n\n\n\nIke flood depths\n\n\n\n\n\n\nIke path"
  },
  {
    "objectID": "slides/lecture01-climate.html#problem-statement",
    "href": "slides/lecture01-climate.html#problem-statement",
    "title": "What drives uncertain climate hazard?",
    "section": "Problem statement:",
    "text": "Problem statement:\n\nYou are designing a storm surge barrier on Galveston Bay. What is the probability distribution of storm surge at your location?\n\nThis knowledge will help you trade off the cost of the barrier against the residual risk of flooding."
  },
  {
    "objectID": "slides/lecture01-climate.html#what-do-we-need-to-know",
    "href": "slides/lecture01-climate.html#what-do-we-need-to-know",
    "title": "What drives uncertain climate hazard?",
    "section": "What do we need to know?",
    "text": "What do we need to know?\n\nTake a moment, write, and then share"
  },
  {
    "objectID": "slides/lecture01-climate.html#historical-data",
    "href": "slides/lecture01-climate.html#historical-data",
    "title": "What drives uncertain climate hazard?",
    "section": "Historical data",
    "text": "Historical data\n\n\n\n\n\nMaximum water levels at Galveston\n\n\n\n\n\n\nReturn levels"
  },
  {
    "objectID": "slides/lecture01-climate.html#tropical-cyclone-tracks-and-characteristics",
    "href": "slides/lecture01-climate.html#tropical-cyclone-tracks-and-characteristics",
    "title": "What drives uncertain climate hazard?",
    "section": "Tropical cyclone tracks and characteristics",
    "text": "Tropical cyclone tracks and characteristics\nCan we use models to create a longer “synthetic” record?\n\nBloemendaal et al. (2020)"
  },
  {
    "objectID": "slides/lecture01-climate.html#wind-and-rainfall-fields",
    "href": "slides/lecture01-climate.html#wind-and-rainfall-fields",
    "title": "What drives uncertain climate hazard?",
    "section": "Wind and rainfall fields",
    "text": "Wind and rainfall fields\nIf we’re going to generate synthetic storms, we need to model the wind and rainfall fields (and other boundary conditions) in order to model the storm surge (using Adcirc, GeoClaw, SFINCS, etc)\n\nKleiber et al. (2023)"
  },
  {
    "objectID": "slides/lecture01-climate.html#sea-level",
    "href": "slides/lecture01-climate.html#sea-level",
    "title": "What drives uncertain climate hazard?",
    "section": "Sea level",
    "text": "Sea level\n\n\n\n\n\nGalveston Relative Sea Level and Projections\n\n\n\nWhat separates the scenarios? To first order:\n\nHow much \\(CO_2\\) we emit\nHow much the climate system warms in response to \\(CO_2\\) (climate sensitivity)\nIce sheet response to temperatures"
  },
  {
    "objectID": "slides/lecture01-climate.html#limitations",
    "href": "slides/lecture01-climate.html#limitations",
    "title": "What drives uncertain climate hazard?",
    "section": "Limitations",
    "text": "Limitations\nSobel et al. (2023):\n\nModels are incorrectly simulating the equatorial Pacific response to greenhouse gas warming. This implies that projections of regional tropical cyclone activity may be incorrect as well"
  },
  {
    "objectID": "slides/lecture01-climate.html#lessons-learned",
    "href": "slides/lecture01-climate.html#lessons-learned",
    "title": "What drives uncertain climate hazard?",
    "section": "Lessons learned?",
    "text": "Lessons learned?\n\n\nHistorical data\n\nMeasures what we care about\nSampling uncertainty\nDoesn’t account for future conditions\n\nModel simulations\n\nCan account for future conditions\nMay be biased or inaccurate\nModel structure uncertainty"
  },
  {
    "objectID": "slides/lecture01-climate.html#some-terms-to-know",
    "href": "slides/lecture01-climate.html#some-terms-to-know",
    "title": "What drives uncertain climate hazard?",
    "section": "Some terms to know 😉",
    "text": "Some terms to know 😉\n\nReturn period\nReturn level\nMonte Carlo\nSynthetic record\nClimate sensitivity\n\nYou should also be able to reason about the merits and limitations of different methodologies for estimating the probability distribution of a hazard (more practice incoming!)"
  },
  {
    "objectID": "slides/lecture01-climate.html#questions",
    "href": "slides/lecture01-climate.html#questions",
    "title": "What drives uncertain climate hazard?",
    "section": "Questions?",
    "text": "Questions?\nFriday:\n\nBring your laptop, if you have one.\nCreate an account at https://github.com/\n\nI will be absent on Friday (visiting Harris County Flood Control District). Yuchen will lead lab 01."
  },
  {
    "objectID": "slides/lecture01-climate.html#references",
    "href": "slides/lecture01-climate.html#references",
    "title": "What drives uncertain climate hazard?",
    "section": "References",
    "text": "References\n\n\nCEVE 543, Data Science for Climate Risk Assessment, August 23, 2023\n\n\n\nBloemendaal, N., Haigh, I. D., de Moel, H., Muis, S., Haarsma, R. J., & Aerts, J. C. J. H. (2020). Generation of a global synthetic tropical cyclone hazard dataset using STORM. Scientific Data, 7(1), 40. https://doi.org/10.1038/s41597-020-0381-2\n\n\nBruneau, M., Barbato, M., Padgett, J. E., Zaghi, A. E., Mitrani-Reiser, J., & Li, Y. (2017). State of the art of multihazard design. Journal of Structural Engineering, 143(10), 03117002. https://doi.org/10.1061/(ASCE)ST.1943-541X.0001893\n\n\nDoss-Gollin, J., Farnham, D. J., Lall, U., & Modi, V. (2021). How unprecedented was the February 2021 Texas cold snap? Environmental Research Letters. https://doi.org/10.1088/1748-9326/ac0278\n\n\nFletcher, S., Lickley, M., & Strzepek, K. (2019). Learning about climate change uncertainty enables flexible water infrastructure planning. Nature Communications, 10(1), 1782. https://doi.org/10.1038/s41467-019-09677-x\n\n\nGarner, G. G., & Keller, K. (2018). Using direct policy search to identify robust strategies in adapting to uncertain sea-level rise and storm surge. Environmental Modelling & Software, 107, 96–104. https://doi.org/10.1016/j.envsoft.2018.05.006\n\n\nKleiber, W., Sain, S., Madaus, L., & Harr, P. (2023). Stochastic tropical cyclone precipitation field generation. Environmetrics, 34(1), e2766. https://doi.org/10.1002/env.2766\n\n\nSobel, A. H., Lee, C.-Y., Bowen, S. G., Camargo, S. J., Cane, M. A., Clement, A., et al. (2023). Near-term tropical cyclone risk and coupled Earth system model biases. Proceedings of the National Academy of Sciences, 120(33), e2209631120. https://doi.org/10.1073/pnas.2209631120"
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#likelihood-of-one-data-point",
    "href": "slides/lecture03-maximum-likelihood.html#likelihood-of-one-data-point",
    "title": "Maximum likelihood",
    "section": "Likelihood of one data point",
    "text": "Likelihood of one data point\nIn Bayes’ rule the data \\(y\\) affect the posterior \\(p(\\theta | y)\\) only through \\(p(y | \\theta)\\), called the “likelihood” \\[\np(y | \\theta)\n\\]"
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#likelihood-example",
    "href": "slides/lecture03-maximum-likelihood.html#likelihood-example",
    "title": "Maximum likelihood",
    "section": "Likelihood example",
    "text": "Likelihood example\n\n\nOne data point: \\(y=2\\).\nNormal distribution with \\(\\sigma = 1\\) and unknown \\(\\mu\\)\nWe can plot \\(p(\\theta | y = 2, \\sigma = 1)\\) as a function of \\(\\theta\\)\n\n\n\n\nusing Distributions\nusing Plots\nusing LaTeXStrings\n\n1function lik(μ::Real, σ::Real, y::Real)\n    dist = Normal(μ, σ)\n2    return pdf(dist, y)\nend\n\nμ = -5:0.02:7\ny = 2\nσ = 1\n3μ_lik = lik.(μ, σ, y)\n\nplot(\n    μ,\n    μ_lik;\n    label=L\"$p(\\theta | y=2,  \\sigma=1)$\",\n    xlabel=L\"$\\theta$\",\n    ylabel=\"Likelihood\",\n    linewidth=2\n)\n\n\n1\n\nThese are called “type annotations” and specify the type of variable that each argument can take. In this case, any Real (float or integer) will work.\n\n2\n\nThis specifies the likelihood using the pdf function\n\n3\n\nThe vector notation lik. means to apply it to each element of x. [lik(xi, 1, 2) for xi in x] would do the same thing."
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#likelihood-of-multiple-data-points",
    "href": "slides/lecture03-maximum-likelihood.html#likelihood-of-multiple-data-points",
    "title": "Maximum likelihood",
    "section": "Likelihood of multiple data points",
    "text": "Likelihood of multiple data points\nIndependent and identically distributed (i.i.d.) assumption: \\[\n\\begin{align}\np(y_1, y_2, \\ldots, y_n) &= p(y_1) p(y_2) \\times \\ldots \\times p(y_n)\\\\\n&= \\prod_{i=1}^n p(y_i)\n\\end{align}\n\\]\n\nImagine we measure \\(y = y_1, y_2, \\ldots, y_n\\): \\[\np(y | \\theta) = \\prod_{i=1}^n p(y_i | \\theta)\n\\]"
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#log-trick",
    "href": "slides/lecture03-maximum-likelihood.html#log-trick",
    "title": "Maximum likelihood",
    "section": "Log trick",
    "text": "Log trick\nRecall: \\(\\log(AB) = \\log(A) + \\log(B)\\) or, more generally, \\[\n\\log \\left( \\prod_{i=1}^n f_i \\right) = \\sum_{i=1}^n \\log(f_i)\n\\]\n\nIt’s often convenient to work with the “log likelihood”: \\[\n\\log p(y | \\theta) =  \\log \\left( \\prod_{i=1}^n p(y_i | \\theta) \\right) = \\sum_{i=1}^n \\log \\left( p(y_i | \\theta) \\right)\n\\] for numerical reasons (multiplying tiny numbers ➡️ underflow)"
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#likelihood-example-multiple-data-points",
    "href": "slides/lecture03-maximum-likelihood.html#likelihood-example-multiple-data-points",
    "title": "Maximum likelihood",
    "section": "Likelihood example: multiple data points",
    "text": "Likelihood example: multiple data points\n\n1function lik(μ::Real, σ::Real, y::Vector{&lt;:Real})\n    dist = Normal(μ, σ)\n2    log_liks = Distributions.logpdf.(dist, y)\n3    return exp(sum(log_liks))\nend\n\nμ = -5:0.02:7\ny = [2.1, 1.9, 2.2, 2.0, 2.1]\nσ = 1\n4μ_lik = [lik(μi, σ, y) for μi in μ]\nplot(\n    μ,\n    μ_lik;\n    label=L\"$p(\\theta | y=y,  \\sigma=1)$\",\n    xlabel=L\"$\\theta$\",\n    ylabel=\"Likelihood\",\n    linewidth=2\n)\n\n\n1\n\nVector{&lt;:Real} means a vector of any subtype of Real. Julia uses “multiple dispatch” which means that we can have multiple functions with the same name but that do different things depending on what the type of the arguments is.\n\n2\n\nDistributions.logpdf is the log of the pdf. Here log_liks will be a vector with the same length as y.\n\n3\n\nAdd up all the log likelihoods then take the exponent – equvalent to the product of the likelihoods.\n\n4\n\nIn this case both \\(\\mu\\) and \\(y\\) are vectors, with different lengths, so using the dot notation lik. won’t work – it doesn’t know which variable to vectorize over."
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#dont-get-it-twisted",
    "href": "slides/lecture03-maximum-likelihood.html#dont-get-it-twisted",
    "title": "Maximum likelihood",
    "section": "Don’t get it twisted",
    "text": "Don’t get it twisted\n\nMany people get this backwards!\n\n\n\nThe likelihood is the probability of the data given the parameters: \\(p(y | \\theta)\\).\nWe often plot the likelihood for many different \\(\\theta\\)\n\n\\(p(y | \\theta)\\) for many different \\(\\theta\\)\nDon’t confuse this with the posterior, which is the probability of the parameters given the data: \\(p(\\theta | y)\\)\n\nAgain: likelihood is probability of data given parameters"
  },
  {
    "objectID": "slides/lecture03-maximum-likelihood.html#references",
    "href": "slides/lecture03-maximum-likelihood.html#references",
    "title": "Maximum likelihood",
    "section": "References",
    "text": "References\n\n\nCEVE 543, Data Science for Climate Risk Assessment"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "",
    "text": "This is the course website for the Fall 2023 edition of CEVE 543, Data Science for Climate Risk Assessment, taught at Rice University by James Doss-Gollin."
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "Course Information",
    "text": "Course Information\n\nDetails on the class and course policies are provided in the syllabus.\nTopics, slides, assignments, and other materials can be found in the schedule."
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "Instructor",
    "text": "Instructor\nDr. James Doss-Gollin is an assistant professor of Civil and Environmental Engineering at Rice University. His research integrates Earth science, data science, and decision science to address challenges in climate risk management, water resources, and energy system resilience. He also teaches CEVE 421/521 (Climate Risk Management)."
  },
  {
    "objectID": "index.html#software-tools",
    "href": "index.html#software-tools",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "Software Tools",
    "text": "Software Tools\n\nThis course will use the Julia programming language. Julia is a modern, free, open source language designed for scientific computing.\nNo prior knowledge of Julia (or other programming languages) is required. We will cover all required material in labs.\nAssignments will be distributed using GitHub Classroom."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "CEVE 543: Data Science for Climate Risk Assessment",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThe layout for this site was inspired by and draws from Vivek Srikrishnan’s Environmental Systems Analysis course at Cornell, STA 210 at Duke University, and Andrew Heiss’s course materials at Georgia State."
  },
  {
    "objectID": "projects/project03/project03.html",
    "href": "projects/project03/project03.html",
    "title": "Project 3",
    "section": "",
    "text": "This is the project for module 3"
  },
  {
    "objectID": "labs/lab01/instructions.html",
    "href": "labs/lab01/instructions.html",
    "title": "Lab 01",
    "section": "",
    "text": "Please see the slides for more details."
  },
  {
    "objectID": "labs/lab01/instructions.html#overview",
    "href": "labs/lab01/instructions.html#overview",
    "title": "Lab 01",
    "section": "",
    "text": "Please see the slides for more details."
  },
  {
    "objectID": "labs/lab01/instructions.html#instructions",
    "href": "labs/lab01/instructions.html#instructions",
    "title": "Lab 01",
    "section": "Instructions",
    "text": "Instructions\n\nRead and go through the Software Installation Guide for instructions on setting up your computer for this course.\nFollow the link to lab 1 assignment from Canvas (it should start with classroom.github.com). It may take a few minutes for the site to configure your repository.\nYou will get a message saying ” Your assignment repository has been created: …“. Click on the link to go to your repository.\nclone the repository for lab 01 (use the Github Classroom link from Canvas) to your computer. You can use VS Code functionality, GitHub Desktop, or your terminal.\nOpen the directory containing the repository in VS Code doing one of the following:\n\nFrom GitHub desktop: Repository &gt; Open in Visual Studio Code\nIn VS Code: File &gt; Open Folder...\n\nInstantiate the project environment as follows:\n\nOpen the command palette (Ctrl+Shift+P on Windows/Linux, Cmd+Shift+P on Mac)\nStart typing “Julia: Start REPL”. It will auto-complete; select the command as it appears.\nIn the Julia REPL, type ] to enter the package manager. It should now show something like (lab01) pkg&gt;.\nType instantiate and run it (Enter). This will install all the packages needed for this lab.\nType the backspace key to exit the package manager.\n\nEdit the solutions.qmd file to add your name and netID\nRender the document\n\nOpen the solutions.qmd file\nOpen the command palette and run “Quarto: Render”. After some activity, a preview of the rendered document should open in VS Code. If you see something like Browse at http://localhost:4200/labs/lab01/solution.html you can open that link in your web browser to see the rendered document.\nCheck the box on line 46 or 47 of the solutions.qmd file to indicate that you were able to render the document. If you were unable to render the document, check the other box and seek help. Make sure the box check renders correctly in the preview\n\nIf you’re still having trouble:\n\nTry running Pkg.build(\"IJulia\") in the Julia REPL\n\ncommit and push your changes"
  },
  {
    "objectID": "labs/lab02/template.html",
    "href": "labs/lab02/template.html",
    "title": "Lab 02",
    "section": "",
    "text": "In this lab we will learn how to work with tabular data in Julia. Specifically, you will get some experience using:\n\nDataFrames.jl to store tabular data as a DataFrame\nCSV.jl to read CSV files and convert them to DataFrames\nDataFramesMeta.jl to manipulate DataFrames\nPlots.jl and StatsPlots.jl to create visualizations\n\n\n\nTechnically, what we are doing today is called exploratory modeling or exploratory data analysis. The latter is more common, but the former makes clear that all visualizations include some (usually implicit) conceptual model of the data. You will find more resources if you search for “exploratory data analysis”, however.\n\n\n\nI have provided you with a lot of template code.\n\nAny code block that starts with ```{julia} is live code and will run.\n\nMake sure you understand what the code does and ask questions (in-person or on Canvas) if you don’t\nDo not change these blocks unless instructed\n\nAny code block that starts with ```julia (without the brackets) is not live code and will not run.\n\nYou should change these blocks to complete the lab, filling in blanks and adding code as needed.\nTo make them live code, change the first line to ```{julia} (with the brackets).\n\nChanges you are expected to make are marked as follows:\n\n\n\n\n\n\n\nThis is an instruction.\n\n\n\n\n\n\nAsk questions in class or post them on the Lab02 discussion on Canvas. The sections of this lab are numbered, so refer to the number when asking questions on Canvas to make it easier for us to help you."
  },
  {
    "objectID": "labs/lab02/template.html#exploratory-modeling",
    "href": "labs/lab02/template.html#exploratory-modeling",
    "title": "Lab 02",
    "section": "",
    "text": "Technically, what we are doing today is called exploratory modeling or exploratory data analysis. The latter is more common, but the former makes clear that all visualizations include some (usually implicit) conceptual model of the data. You will find more resources if you search for “exploratory data analysis”, however."
  },
  {
    "objectID": "labs/lab02/template.html#instructions",
    "href": "labs/lab02/template.html#instructions",
    "title": "Lab 02",
    "section": "",
    "text": "I have provided you with a lot of template code.\n\nAny code block that starts with ```{julia} is live code and will run.\n\nMake sure you understand what the code does and ask questions (in-person or on Canvas) if you don’t\nDo not change these blocks unless instructed\n\nAny code block that starts with ```julia (without the brackets) is not live code and will not run.\n\nYou should change these blocks to complete the lab, filling in blanks and adding code as needed.\nTo make them live code, change the first line to ```{julia} (with the brackets).\n\nChanges you are expected to make are marked as follows:\n\n\n\n\n\n\n\nThis is an instruction."
  },
  {
    "objectID": "labs/lab02/template.html#getting-help",
    "href": "labs/lab02/template.html#getting-help",
    "title": "Lab 02",
    "section": "",
    "text": "Ask questions in class or post them on the Lab02 discussion on Canvas. The sections of this lab are numbered, so refer to the number when asking questions on Canvas to make it easier for us to help you."
  },
  {
    "objectID": "labs/lab02/template.html#clone-the-respository",
    "href": "labs/lab02/template.html#clone-the-respository",
    "title": "Lab 02",
    "section": "2.1 Clone the respository",
    "text": "2.1 Clone the respository\nFirst, you’ll need to clone this repository to your computer. As with Lab 01, I recommend to use GitHub Desktop or the built-in Git support in VS Code."
  },
  {
    "objectID": "labs/lab02/template.html#install-required-packages",
    "href": "labs/lab02/template.html#install-required-packages",
    "title": "Lab 02",
    "section": "2.2 Install required packages",
    "text": "2.2 Install required packages\n\nIn VS Code, open the command palette (Windows: Ctrl+Shift+P, Mac: Cmd+Shift+P) and select Julia: Start REPL.\nIn the Julia REPL, type ] to enter the package manager.\nType activate . to activate the project environment.\nType instantiate to install the required packages. This may take a moment.1\n\n\n\n1 Julia precompiles packages when they are installed, and (to a lesser extent) when they are first used. The first time you use a package it may take a moment to load. This is normal, nothing to worry about, and rapidly improving."
  },
  {
    "objectID": "labs/lab02/template.html#using-statement",
    "href": "labs/lab02/template.html#using-statement",
    "title": "Lab 02",
    "section": "2.3 Using statement",
    "text": "2.3 Using statement\nIn Julia we say using to import a package. Typically we want to do this as early as possible in a script or notebook.\n\n1using CSV\nusing DataFrames\nusing DataFramesMeta\nusing Dates\nusing Plots\nusing StatsBase: mean\nusing StatsPlots\n\n\n1\n\nNote that this is live code and will run. If you have not yet installed the packages, you will see an error message. Don’t change this block – see instructions"
  },
  {
    "objectID": "labs/lab02/template.html#dates",
    "href": "labs/lab02/template.html#dates",
    "title": "Lab 02",
    "section": "3.1 Dates",
    "text": "3.1 Dates\nWe can see that our DataFrame has five columns, the first of which is “Date Time”. However, the “Date Time” column is being parsed as a string. We want it to be a DateTime object from the Dates package. To do that, we need to tell Julia how the dates are formatted. We could then manually convert, but CSV.read has a kewyord argument that we can use\n\n1date_format = \"yyyy-mm-dd HH:MM\"\ndf = CSV.read(fname, DataFrame; dateformat=date_format)\nfirst(df, 3)\n\n\n1\n\nThis is a string that tells Julia how the dates are formatted. For example, 1928-01-01 00:00. See the documentation for more information.\n\n\n\n\n3×5 DataFrame\n\n\n\nRow\nDate Time\nWater Level\nSigma\nI\nL\n\n\n\nDateTime\nFloat64\nFloat64\nInt64\nInt64\n\n\n\n\n1\n1928-01-01T00:00:00\n-0.547\n0.0\n0\n0\n\n\n2\n1928-01-01T01:00:00\n-0.699\n0.0\n0\n0\n\n\n3\n1928-01-01T02:00:00\n-0.73\n0.0\n0\n0"
  },
  {
    "objectID": "labs/lab02/template.html#water-levels",
    "href": "labs/lab02/template.html#water-levels",
    "title": "Lab 02",
    "section": "3.2 Water levels",
    "text": "3.2 Water levels\nThe next column is “Water Level”, which is the height of the water above the reference point (NAVD) in meters. We can see that this is being parsed as a float, which is what we want 👍. However, you have to know that the data is in meters rather than inches or feet or something else. To explicitly add information about the units, we can use the Unitful package.\n\nusing Unitful\n\ndf[!, \" Water Level\"] .*= 1u\"m\"\nfirst(df, 3)\n\n3×5 DataFrame\n\n\n\nRow\nDate Time\nWater Level\nSigma\nI\nL\n\n\n\nDateTime\nQuantity…\nFloat64\nInt64\nInt64\n\n\n\n\n1\n1928-01-01T00:00:00\n-0.547 m\n0.0\n0\n0\n\n\n2\n1928-01-01T01:00:00\n-0.699 m\n0.0\n0\n0\n\n\n3\n1928-01-01T02:00:00\n-0.73 m\n0.0\n0\n0\n\n\n\n\n\n\n\n\n\n\n\n\nCode explanation\n\n\n\n\nWe select the column with water levels using its name. The ! means “all rows”. Thus, df[!, \" Water Level\"] is a vector of all the water levels stored.\n*= means to multiply in place. For example, if x=2 then x *= 2 is equivalent to x = x * 2. .*= is a vector syntax, meaning do the multiplication to each element of the vector individually.\n1u\"m\" is a Unitful object that represents 1 meter. We multiply the water levels by this to convert them to meters."
  },
  {
    "objectID": "labs/lab02/template.html#subsetting-and-renaming",
    "href": "labs/lab02/template.html#subsetting-and-renaming",
    "title": "Lab 02",
    "section": "3.3 Subsetting and renaming",
    "text": "3.3 Subsetting and renaming\nWe want to only keep the first two (for more on the other three, see here). We can also rename the columns to make them easier to work with (spaces in variable names are annoying). To do this, we use the @rename function:\n\n1df = @rename(df, :datetime = $\"Date Time\", :lsl = $\" Water Level\");\n\n\n1\n\nThe $ is needed here because the right hand side is a string, not a symbol.\n\n\n\n\nThen, we can use the @select function to do select the columns we want. Notice how the first argument to select is the DataFrame and the subsequent arguments are column names. Notice also that our column names were strings (\"Date Time\"), but we can also use symbols (:datetime).\n\ndf = @select(df, :datetime, :lsl);\n\nFor more on what DataFramesMeta can do, see this Tweet."
  },
  {
    "objectID": "labs/lab02/template.html#writing-a-function",
    "href": "labs/lab02/template.html#writing-a-function",
    "title": "Lab 02",
    "section": "3.4 Writing a function",
    "text": "3.4 Writing a function\nWe have just done a lot of work to read in our data. However, this just gives us data for the year 1928. In fact, we have a CSV file for each year 1928-2021. To make sure we can read them each in excatly the same way, we want to write a function.\nfunction read_tides(year::Int)\n    fname = \"data/tidesandcurrents-8638610-$(year)-NAVD-GMT-metric.csv\" # don't change this\n    date_format = \"yyyy-mm-dd HH:MM\" # don't change this\n    # your code here\n    # 1. read in the CSV file and save as a dataframe\n    # 2. convert the \"Date Time\" column to a DateTime object\n    # 3. convert the \" Water Level\" column to meters\n    # 4. rename the columns to \"datetime\" and \"lsl\"\n    # 5. select the \"datetime\" and \"lsl\" columns\n    # 6. return the dataframe\nend\n\n# print out the first 10 rows of the 1928 data\nfirst(read_tides(1928), 10) \n\n\n\n\n\n\nInstructions\n\n\n\nFill out this function. Your function should implement the six steps indicated in the instructions. When it’s done, convert it to a live code block with: ```{julia}. When you run this code, it should print out the first 10 rows of the 1928 data. Make sure they look right!"
  },
  {
    "objectID": "labs/lab02/template.html#combining-files",
    "href": "labs/lab02/template.html#combining-files",
    "title": "Lab 02",
    "section": "3.5 Combining files",
    "text": "3.5 Combining files\nNow that we have the ability to read in the data corresponding to any year, we can read them all in and combine into a single DataFrame. First, let’s read in all the data.\nyears = 1928:2021 # all the years of data\nannual_data = # 1. call the read_tides function on each year\nNext, we’ll use the vcat function to combine all the data into a single DataFrame.\ndf = vcat(annual_data...) # don't change this\nfirst(df, 5)\nlast(df, 5) # check the last 5 years\n\n\n\n\n\n\nInstructions\n\n\n\n\nCall the read_tides function on each year\nTurn the two code blocks in this section into live code blocks\nRun the code and make sure the first 5 rows and last five rows look right"
  },
  {
    "objectID": "labs/lab02/template.html#time-series-plot",
    "href": "labs/lab02/template.html#time-series-plot",
    "title": "Lab 02",
    "section": "4.1 Time series plot",
    "text": "4.1 Time series plot\nLet’s start with a simple time series plot of the water levels. Our data is collected hourly, so we have a lot of data points! Still, we can plot them all.\n\nplot(\n    df.datetime,\n    df.lsl;\n    title=\"Water levels at Sewells Point, VA\",\n1    ylabel=\"Water level\",\n2    label=false\n)\n\n\n1\n\nBecause we are using the Unitful pacakge, the y-axis label will automatically include the units!!!\n\n2\n\nWe are only plotting one “series” (data set), so we don’t need a legend."
  },
  {
    "objectID": "labs/lab02/template.html#zooming-in",
    "href": "labs/lab02/template.html#zooming-in",
    "title": "Lab 02",
    "section": "4.2 Zooming in",
    "text": "4.2 Zooming in\nFocusing on the entire time series means we can’t dig into the details. Let’s zoom in on a single month (October 1928) using the @subset function.\n\nt_start = Dates.DateTime(1928, 10, 1, 0)\nt_end = Dates.DateTime(1928, 10, 31, 23)\ndf_month = @subset(df, t_start .&lt;= :datetime .&lt;= t_end)\nfirst(df_month, 3)\n\n3×2 DataFrame\n\n\n\nRow\ndatetime\nlsl\n\n\n\nDateTime\nQuantity…\n\n\n\n\n1\n1928-10-01T00:00:00\n0.215 m\n\n\n2\n1928-10-01T01:00:00\n0.429 m\n\n\n3\n1928-10-01T02:00:00\n0.581 m\n\n\n\n\n\n\nNow we can plot it as above.\n\nplot(\n    df_month.datetime,\n    df_month.lsl;\n    title=\"Water levels at Sewells Point, VA\",\n    ylabel=\"Water level\",\n    label=false\n)"
  },
  {
    "objectID": "labs/lab02/template.html#instructions-3",
    "href": "labs/lab02/template.html#instructions-3",
    "title": "Lab 02",
    "section": "4.3 Instructions",
    "text": "4.3 Instructions\nChange the start and end dates to plot March 2020. What do you notice? :::"
  },
  {
    "objectID": "labs/lab02/template.html#groupby",
    "href": "labs/lab02/template.html#groupby",
    "title": "Lab 02",
    "section": "4.4 Groupby",
    "text": "4.4 Groupby\nAn essential idea in working with tabular data (and other data formats) is “split-apply-combine”. Essentially: split the data into groups, apply some function to each group, and then combine the results.\nWe can use this workflow to answer an interesting question: what is the average water level for each month?22 To do a better job, we should separate out the long-term trend from the seasonal cycle. This is called de-trending and is a common technique in climate science. We can worry more about this later.\n\n1df[!, :month] = Dates.month.(df.datetime)\n2dropmissing!(df, :lsl)\n3df_bymonth = groupby(df, :month)\n4df_climatology = combine(df_bymonth, :lsl =&gt; mean =&gt; :lsl_avg);\n\n\n1\n\nThis creates a new column called :month that is the month of each observation.\n\n2\n\nThis will discard any rows in df that have a missing value of :lsl. This is necessary because the mean function will return missing if any of the values are missing.\n\n3\n\nThis creates a GroupedDataFrame object that contains all the data grouped by month.\n\n4\n\nThis takes the grouped data and calculates the mean of the :lsl column for each month. The general syntax is combine(grouped_df, :column =&gt; function).\n\n\n\n\nWe can now plot the climatology.\n\nplot(\n1    df_climatology.month,\n    df_climatology.lsl_avg;\n    xticks=1:12,\n    xlabel=\"Month\",\n    ylabel=\"Average Water level\",\n    linewidth=2,\n    label=false\n)\n\n\n1\n\nWe can use df.colname instead of df[!, :colname]. The latter is more robust but the former is easier to type.\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions\n\n\n\n\nUse the full dataset to plot the climatology using data from all years\nNext, create a new Markdown header (## Groupby Day of Year) plot the average water level for each day of the year (Dates.dayofyear from 1 to 366).\nWhat do you notice?"
  },
  {
    "objectID": "labs/lab02/template.html#boxplot",
    "href": "labs/lab02/template.html#boxplot",
    "title": "Lab 02",
    "section": "4.5 Boxplot",
    "text": "4.5 Boxplot\nBoxplots are ways to visualize the distribution of data. They show the median (the line in the middle of the box), the interquartile range (the box), and the range of the data (the whiskers). Outliers are shown as dots. We can use the boxplot function from the StatsPlots.jl package:\n\nboxplot(\n    df[!, :month],\n    df[!, :lsl];\n    xticks=1:12,\n    xlabel=\"Month\",\n    ylabel=\"Water level\",\n    label=false,\n    title=\"Climatology\"\n)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions\n\n\n\nRepeat this analysis grouping by year rather than month. What do you notice from the boxplots?"
  },
  {
    "objectID": "labs/lab02/template.html#submission",
    "href": "labs/lab02/template.html#submission",
    "title": "Lab 02",
    "section": "4.6 Submission",
    "text": "4.6 Submission\n\nRemove all of the instructions blocks (from the first ::: {.callout-important} to the following :::)\nRemove all of the text I have written (including this block) so that all the text is your own. This makes it much easier to grade and to follow what is yours.\n\nDo not delete any of the headers\n\nThus, the beginning of the document should have the headers for the overview, exploratory modeling, instructions, and getting help, but these should not have any text\nThis will ensure all documents have the same numbering to make it easier to troubleshoot any issues\n\nDo not delete any of the code\n\nMake sure your code runs (click the “Run All” button in the command palette)\nRender your notebook as HTML (optional)\n\nOpen comand palette\nSelect Quarto: Render HTML\nThis will create a website that you can view in your browser. The address will be in your terminal like\n\nWatching files for changes\nBrowse at http://localhost:4200/labs/lab02/instructions.html\n\nMake sure your notebook looks right in the browser.\n\nRender your hnotebook as DOCX (required)\n\nOpen comand palette\nSelect Quarto: Render DOCX\nIt may give you a link to click on in order to download the file. Click it and it will be downloaded to your computer (probably in your Downloads folder)\n\nSubmit the .docx file to Canvas.\n\nProofread before you submit!"
  },
  {
    "objectID": "labs/lab01/solution.html",
    "href": "labs/lab01/solution.html",
    "title": "Lab 01",
    "section": "",
    "text": "Do not modify this section!"
  },
  {
    "objectID": "labs/lab01/solution.html#setup",
    "href": "labs/lab01/solution.html#setup",
    "title": "Lab 01",
    "section": "",
    "text": "Do not modify this section!"
  },
  {
    "objectID": "labs/lab01/solution.html#running-code",
    "href": "labs/lab01/solution.html#running-code",
    "title": "Lab 01",
    "section": "2 Running Code",
    "text": "2 Running Code\nWe can use Quarto to run Julia code in-line\n\nprintln(\"I'm using Julia!\")\n\nI'm using Julia!"
  },
  {
    "objectID": "labs/lab01/solution.html#rendering-the-document",
    "href": "labs/lab01/solution.html#rendering-the-document",
    "title": "Lab 01",
    "section": "3 Rendering the Document",
    "text": "3 Rendering the Document\nNow, verify that you can render the document in HTML:\n\nOpen the command palette (Cmd+Shift+P on macOS, Ctrl+Shift+P on Windows/Linux)\nType “Quarto: Render Document”\nA web browser should open with the rendered document\n\nCheck the box (replace the space with an x) to confirm that this worked\n\nthis worked for me\nthis did not work for me (specify the error below)"
  },
  {
    "objectID": "projects/project02/project02.html",
    "href": "projects/project02/project02.html",
    "title": "Project 2",
    "section": "",
    "text": "This is the project for module 2"
  },
  {
    "objectID": "projects/project04/project04.html",
    "href": "projects/project04/project04.html",
    "title": "Project 4",
    "section": "",
    "text": "This is the project for module 4"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#pdf-and-cdf",
    "href": "slides/lecture02-marginal-joint-conditional.html#pdf-and-cdf",
    "title": "Working with probability distributions",
    "section": "PDF and CDF",
    "text": "PDF and CDF\nIf \\(F_X\\) is the cumulative distribution function (CDF) of \\(X\\) and \\(f_X\\) is the probability density function (PDF) of \\(X\\), then: \\[\nF_X ( x ) = \\int_{-\\infty}^x f_X(u) \\, du,\n\\] and (if \\(f_X\\) is continuous at \\(x\\) which it typically will be) \\[\nf_{X}(x)={\\frac {d}{dx}}F_{X}(x).\n\\] A useful property is \\[\n\\Pr[a\\leq X\\leq b]=\\int _{a}^{b}f_{X}(x)\\,dx\n\\]\n\n\n\n\n\n\nImportant\n\n\nWe can only talk about the probability that \\(y\\) is in some interval \\([a, b]\\), which is given by the integral of the PDF over that interval. The probability that \\(y\\) takes on the value \\(y^*\\), written \\(p(y=y^*)\\), is zero."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#pdf-example",
    "href": "slides/lecture02-marginal-joint-conditional.html#pdf-example",
    "title": "Working with probability distributions",
    "section": "PDF example",
    "text": "PDF example\n\n# https://www.matecdev.com/posts/julia-numerical-integration.html\nfunction quad_trap(f, a, b, N)\n    h = (b - a) / N\n    int = h * (f(a) + f(b)) / 2\n    for k in 1:(N-1)\n        xk = (b - a) * k / N + a\n        int = int + h * f(xk)\n    end\n    return int\nend;\n\nSimple example to illustrate that \\[\nF_X(2) = \\int_{-\\infty}^2 f_X(u) \\, du\n\\]\nWe will use a standard Normal distribution as an example\n\nusing Distributions\n\n1dist = Normal()\n2f(x) = pdf(dist, x)\n3approx = quad_trap(f, -100, 2, 1000)\nexact = cdf(dist, 2)\n\napprox, exact\n\n\n1\n\nMean 0 and standard deviation 1 by default\n\n2\n\npdf(d, x) tells us the probability density function of distribution d evaluated at x\n\n3\n\nquad_trap is a trapezoidal approximation of the integral with arguments: function, lower bound, upper bound, and number of points\n\n\n\n\n(0.9771562639858903, 0.9772498680518208)"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#pmfs",
    "href": "slides/lecture02-marginal-joint-conditional.html#pmfs",
    "title": "Working with probability distributions",
    "section": "PMFs",
    "text": "PMFs\n\nDiscrete distributions (like the Poisson) have a probability mass function (PMF) instead of a PDF\nFor PMFs, \\(p(y=y^*)\\) is the probability that \\(y\\) takes on the value \\(y^*\\), and is defined\n\n\nusing LaTeXStrings\nusing Plots\n\nf(x) = pdf(Poisson(5), x) # the Poisson PMF\n1plot(f, 0:1:20; label=\"PMF\", marker=:o, xlabel=L\"$x^*$\", ylabel=L\"$p(x=x^*)$\")\n\n\n1\n\nIn the Distributions package, both PDFs and PMFs are called pdf"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#bayes-rule",
    "href": "slides/lecture02-marginal-joint-conditional.html#bayes-rule",
    "title": "Working with probability distributions",
    "section": "Bayes’ Rule",
    "text": "Bayes’ Rule\n\\[\np(\\theta, y) = p(\\theta) p(y | \\theta)\n\\] and thus \\[\np(\\theta | y) = \\frac{p(\\theta, y)}{p(y)} = \\frac{p(\\theta) p(y | \\theta)}{p(y)}\n\\] generally: \\[\np(\\theta | y) \\propto p(\\theta) p(y | \\theta)\n\\]"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#marginal-probability",
    "href": "slides/lecture02-marginal-joint-conditional.html#marginal-probability",
    "title": "Working with probability distributions",
    "section": "Marginal probability",
    "text": "Marginal probability\nProbability of event \\(A\\): \\(\\Pr(A)\\)\n\nWe will write the marginal probability density function as \\[\np(\\theta) \\quad \\text{or} \\quad p(y)\n\\]"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#joint-probability",
    "href": "slides/lecture02-marginal-joint-conditional.html#joint-probability",
    "title": "Working with probability distributions",
    "section": "Joint probability",
    "text": "Joint probability\nProbability of events \\(A\\) and \\(B\\): \\(\\Pr(A \\& B)\\)\n\n\\[\np(\\theta, y)\n\\]"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#conditional-probability",
    "href": "slides/lecture02-marginal-joint-conditional.html#conditional-probability",
    "title": "Working with probability distributions",
    "section": "Conditional probability",
    "text": "Conditional probability\nProbability of event \\(A\\) given event \\(B\\): \\(\\Pr(A | B)\\)\n\n\\[\np(\\theta | y) \\quad \\text{or} \\quad p(y | \\theta)\n\\]"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#example-two-dice-wager",
    "href": "slides/lecture02-marginal-joint-conditional.html#example-two-dice-wager",
    "title": "Working with probability distributions",
    "section": "Example: two-dice wager",
    "text": "Example: two-dice wager\n\nA gambler presents you with an even-money wager. You will roll two dice, and if the highest number showing is one, two, three or four, then you win. If the highest number on either die is five or six, then she wins. Should you take the bet?"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#overview",
    "href": "slides/lecture02-marginal-joint-conditional.html#overview",
    "title": "Working with probability distributions",
    "section": "Overview",
    "text": "Overview\nStandard linear regression model, let’s assume \\(x \\in \\mathbb{R}\\) for simplicity (1 predictor): \\[\ny_i = ax_i + b + \\epsilon_i\n\\] where \\(\\epsilon_i \\sim N(0, \\sigma^2)\\)."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#conditional-distribution-of-y_i",
    "href": "slides/lecture02-marginal-joint-conditional.html#conditional-distribution-of-y_i",
    "title": "Working with probability distributions",
    "section": "Conditional distribution of \\(y_i\\)",
    "text": "Conditional distribution of \\(y_i\\)\nThe conditional probability density of \\(y_i\\) given \\(x_i\\) is \\[\np(y_i | x_i, a, b, \\sigma) = N(ax_i + b, \\sigma^2)\n\\] which is a shorthand for writing out the full equation for the Normal PDF. We can (and often will) write this as \\[\ny_i \\sim \\mathcal{N}(ax_i + b, \\sigma^2)\n\\] Finally, we will sometimes write \\(p(y_i | x_i)\\) as a shorthand for \\(p(y_i | x_i, a, b, \\sigma)\\). While fine in many circumstances, we should take care to make sure we are extremely clear about what parameters we are conditioning on."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#marginal-distribution-of-y_i",
    "href": "slides/lecture02-marginal-joint-conditional.html#marginal-distribution-of-y_i",
    "title": "Working with probability distributions",
    "section": "Marginal distribution of \\(y_i\\)",
    "text": "Marginal distribution of \\(y_i\\)\nThe marginal probability density of \\(y_i\\) is \\[\np(y_i | a, b, \\sigma) = \\int p(y_i | x_i, a, b, \\sigma) p(x_i) \\, dx_i\n\\] where \\(p(x_i)\\) is the probability density of \\(x_i\\)."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#joint-distribution-of-y_i-and-x_i",
    "href": "slides/lecture02-marginal-joint-conditional.html#joint-distribution-of-y_i-and-x_i",
    "title": "Working with probability distributions",
    "section": "Joint distribution of \\(y_i\\) and \\(x_i\\)",
    "text": "Joint distribution of \\(y_i\\) and \\(x_i\\)\nThe joint probability density of \\(y_i\\) and \\(x_i\\) is \\[\np(y_i, x_i | a, b, \\sigma) = p(y_i | x_i, a, b, \\sigma) p(x_i)\n\\] where \\(p(x_i)\\) is the probability density of \\(x_i\\)."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#simulation",
    "href": "slides/lecture02-marginal-joint-conditional.html#simulation",
    "title": "Working with probability distributions",
    "section": "Simulation",
    "text": "Simulation\n\nm = 2\nb = 1\nσ = 1.5\n\n\nIf \\(x=2\\), we can simulate from the conditional distribution of \\(y\\):\n\nN_sim = 10_000\n\nx = 2\ny = rand(Normal(m * x + b, σ), N_sim)\nhistogram(y, title=L\"$p(y | x=2)$\", label=\"Sampled\", normalize=true, xlabel=L\"$y$\", ylabel=\"Density\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf \\(x \\sim N(0, 1)\\), then we can simulate from the joint distribution of \\(x\\) and \\(y\\):\n\nx = rand(Normal(0, 1), 10_000)\n1y = [rand(Normal(m * xᵢ + b, σ)) for xᵢ in x]\nscatter(x, y, label=L\"$p(x, y)$\", xlabel=L\"$x$\", ylabel=L\"$y$\")\n\n\n1\n\nA list comprehension here is less elegant than writing rand.(Normal.(m .* x .+ b, σ)) but it is easy to read. The results are the same.\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, assuming the same distribution, we can simulate from the marginal distribution of \\(y\\):\n\nhistogram(y, label=L\"$p(y)$\", normalize=true, xlabel=L\"$y$\", ylabel=\"Density\")"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#overview-1",
    "href": "slides/lecture02-marginal-joint-conditional.html#overview-1",
    "title": "Working with probability distributions",
    "section": "Overview",
    "text": "Overview\nThe Negative Binomial distribution (see last lecture) can be interpreted as a Gamma-Poisson mixture:\n\\[\n\\begin{align}\ny &\\sim \\textrm{Poisson}(\\lambda) \\\\\n\\lambda &\\sim \\textrm{Gamma}\\left(r, \\frac{p}{1-p} \\right)\n\\end{align}\n\\]"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#mathematical-derivation",
    "href": "slides/lecture02-marginal-joint-conditional.html#mathematical-derivation",
    "title": "Working with probability distributions",
    "section": "Mathematical derivation",
    "text": "Mathematical derivation\nWe can show mathematically that if \\(y ~ \\textrm{Negative Binomial}(r, p)\\), that is equivalent to the mixture model \\(y ~ \\textrm{Poisson}(\\lambda)\\) and \\(\\lambda ~ \\textrm{Gamma}(r, p / (1 - p))\\). \\[\n\\begin{align}\n& \\int_0^{\\infty} f_{\\text {Poisson }(\\lambda)}(y) \\times f_{\\operatorname{Gamma}\\left(r, \\frac{p}{1-p}\\right)}(\\lambda) \\mathrm{d} \\lambda \\\\\n& = \\int_0^{\\infty} \\frac{\\lambda^y}{y !} e^{-\\lambda} \\times \\frac{1}{\\Gamma(r)}\\left(\\frac{p}{1-p} \\lambda\\right)^{r-1} e^{-\\frac{p}{1-p} \\lambda}\\left(\\frac{p}{1-p} \\mathrm{~d} \\lambda\\right) \\\\\n\\ldots \\\\\n&= f_{\\text {Negative Binomial }(r, p)}(y)\n\\end{align}\n\\] For all the steps see Wikipedia."
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#simulation-example",
    "href": "slides/lecture02-marginal-joint-conditional.html#simulation-example",
    "title": "Working with probability distributions",
    "section": "Simulation example",
    "text": "Simulation example\nWe can see this with simulation. First we define a function to simulate from the Gamma-Poisson mixture:\n\nfunction gamma_poisson(r, p)\n    g_dist = Gamma(r, (1 - p) / p)\n    λ = rand(g_dist)\n    p_dist = Poisson(λ)\n    return rand(p_dist)\nend\n\ngamma_poisson (generic function with 1 method)\n\n\n\nThen we can simulate from the mixture and compare to the Negative Binomial distribution:\n\nr = 3 # number of failures\np = 1 / 6 # probability of failure\ndist = NegativeBinomial(r, p)\n\n# simulate 50,000 rolls\nrolls = [gamma_poisson(r, p) for _ in 1:50_000]\n\n# plot the samples\nxticks = 0:1:60 # specify the bin values\nhistogram(\n    rolls;\n    bins=-0.5:1:(maximum(xticks)+0.5),\n    xlabel=\"Number of rolls\",\n    ylabel=\"PMF\",\n    marker=:o,\n    label=\"Gamma-Poisson\",\n    normalize=true\n)\n\n# add the PDF of the negative binomial distribution\nplot!(xticks, pdf.(dist, xticks); linewidth=2, label=\"Neg. Binom.\")"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#so-what",
    "href": "slides/lecture02-marginal-joint-conditional.html#so-what",
    "title": "Working with probability distributions",
    "section": "So what?",
    "text": "So what?\nI don’t need you to know all the details of this particular mixture model. What I do want you to understand is:\n\n\nWe can model data using combinations of simpler distributions\nWe can use simple simulation approaches to approximate more complex relationships\n\nFor example, if we wanted to know \\(\\Pr(y &gt; 10)\\) when \\(y \\sim \\text{Negative Binomial}(r, p)\\) but we didn’t have a Negative Binomial distribution in our software package we could estimate our quantity of interest\nThis isn’t very interesting for this model (there is an analytic solution!) but lots of models we might want to write down don’t have analytic solutions"
  },
  {
    "objectID": "slides/lecture02-marginal-joint-conditional.html#key-ideas",
    "href": "slides/lecture02-marginal-joint-conditional.html#key-ideas",
    "title": "Working with probability distributions",
    "section": "Key ideas",
    "text": "Key ideas\n\nConditional probability\nJoint probability\nMarginal probability\nBayes’ Rule\nLikelihood\nPosterior\nSimulation methods\n\n\n\nCEVE 543, Data Science for Climate Risk Assessment"
  },
  {
    "objectID": "slides/lecture01-lab.html#overview",
    "href": "slides/lecture01-lab.html#overview",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Overview",
    "text": "Overview\nLabs are in-class exercises intended to get practice with coding or analysis workflows.\n\nInstructions available on website\nDownload ahead of time by using link from Canvas\nYou will have your own repository (more in a minute)\nTry to finish in class, but due in 1 week"
  },
  {
    "objectID": "slides/lecture01-lab.html#tool-overview",
    "href": "slides/lecture01-lab.html#tool-overview",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Tool overview",
    "text": "Tool overview\nIn this class, we will use\n\n\nJulia\nGitHub\nQuarto\nVS Code (suggested)"
  },
  {
    "objectID": "slides/lecture01-lab.html#why-julia",
    "href": "slides/lecture01-lab.html#why-julia",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Why Julia?",
    "text": "Why Julia?\n\n\n\n\nSyntax\n\nReadable to computers and humans\nClosely parallels math notation\n\nDesigned for numerical and scientific computing\n\n\n\nFast!\n\n“Two language problem”\nAll you need is Julia\n\nOpen source"
  },
  {
    "objectID": "slides/lecture01-lab.html#julia-example",
    "href": "slides/lecture01-lab.html#julia-example",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Julia example",
    "text": "Julia example\nA (naive) implementation of the Fibonacci sequence:\n\nfunction fib(n)\n    if n &lt; 2\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\nfib(10)\n\n55"
  },
  {
    "objectID": "slides/lecture01-lab.html#github",
    "href": "slides/lecture01-lab.html#github",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "GitHub",
    "text": "GitHub\n\n\nYou need a GitHub account\nCode is stored in “repositories”\nclone a repository to your computer\nMake changes and commit them\npush your changes to GitHub\nUsing GitHub classroom, instructors can view your code"
  },
  {
    "objectID": "slides/lecture01-lab.html#quarto",
    "href": "slides/lecture01-lab.html#quarto",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Quarto",
    "text": "Quarto\nQuarto is a tool that allows you to combine text and code and create many types of output\n\nThis website is made with Quarto\nYou will use Quarto to create reports for labs\n\nEverything in one place\nNo running code, save a figure to Downloads, copy into Word, then update your code and try to remember where to paste it\n\nReproducible"
  },
  {
    "objectID": "slides/lecture01-lab.html#vs-code",
    "href": "slides/lecture01-lab.html#vs-code",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "VS Code",
    "text": "VS Code\n\nVS Code is a text editor\n\nIf you are an advanced user of another text editor, you can use that instead, but I recommend VS Code\n\nVS Code can work as a Julia IDE"
  },
  {
    "objectID": "slides/lecture01-lab.html#detailed-instructions",
    "href": "slides/lecture01-lab.html#detailed-instructions",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Detailed instructions",
    "text": "Detailed instructions\nSee Setup"
  },
  {
    "objectID": "slides/lecture01-lab.html#lab-01-instructions",
    "href": "slides/lecture01-lab.html#lab-01-instructions",
    "title": "Setting up Julia, GitHub, and Quarto",
    "section": "Lab 01 Instructions",
    "text": "Lab 01 Instructions\n\nInstall software up following instructions on course website\nclone the repository for lab 01 (use the Github Classroom link from Canvas)\nEdit the solutions.qmd file to add your name and netID\ncommit and push your changes\n\n\n\nCEVE 543, Data Science for Climate Risk Assessment"
  },
  {
    "objectID": "slides/lecture01-welcome.html#about-me",
    "href": "slides/lecture01-welcome.html#about-me",
    "title": "Welcome to CEVE 543!!",
    "section": "About me",
    "text": "About me\n\n\n\n\nDr. James Doss-Gollin\nAssistant professor in CEVE\nInterested in bridging Earth science, data science, and decision science to improve climate risk management and long-term infrastructure planning\nHometown: New Haven, CT (❤️ for Houston, NYC, and Luque, Paraguay)\nDoss-Gollin lab\n\n\n\n\n\n\nJames Doss-Gollin\n\n\n\n\n\nOffice hours MWF TBD"
  },
  {
    "objectID": "slides/lecture01-welcome.html#ta",
    "href": "slides/lecture01-welcome.html#ta",
    "title": "Welcome to CEVE 543!!",
    "section": "TA",
    "text": "TA\n\n\n\n\n\nYuchen Lu\n\n\n\n\nYuchen Lu\nThird year Ph.D. student in CEVE\nCurrently researching statistical methods to estimate the probability of extreme precipitation\nHometown: Wuhan, China (via Pittsburgh)\n\n\n\n\nYuchen will mainly help me with grading, but you can also reach out to her with questions"
  },
  {
    "objectID": "slides/lecture01-welcome.html#your-turn",
    "href": "slides/lecture01-welcome.html#your-turn",
    "title": "Welcome to CEVE 543!!",
    "section": "Your turn!",
    "text": "Your turn!\n\nYour name\nYour field and program of study\nYour hometown(s)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#what-is-one-thing-you-hope-to-learn-this-semester",
    "href": "slides/lecture01-welcome.html#what-is-one-thing-you-hope-to-learn-this-semester",
    "title": "Welcome to CEVE 543!!",
    "section": "What is one thing you hope to learn this semester?",
    "text": "What is one thing you hope to learn this semester?\n\nTake a moment to think, write it down, and then we’ll share.\n\n\n\nGood to get a sense of background and goals\nInvite students to share – this will help me get a sense of how forthcoming they are"
  },
  {
    "objectID": "slides/lecture01-welcome.html#floods-in-paraguay-2015",
    "href": "slides/lecture01-welcome.html#floods-in-paraguay-2015",
    "title": "Welcome to CEVE 543!!",
    "section": "Floods in Paraguay, 2015",
    "text": "Floods in Paraguay, 2015\n\nFigure 1: Municipalidad de Asunción"
  },
  {
    "objectID": "slides/lecture01-welcome.html#tx-cold-snap-2021",
    "href": "slides/lecture01-welcome.html#tx-cold-snap-2021",
    "title": "Welcome to CEVE 543!!",
    "section": "TX Cold Snap, 2021",
    "text": "TX Cold Snap, 2021\n\n\n\n\n\n\n\n\n\n\nFigure 2: Go Nakamura for Getty Images"
  },
  {
    "objectID": "slides/lecture01-welcome.html#what-other-climate-hazards-do-you-know-about",
    "href": "slides/lecture01-welcome.html#what-other-climate-hazards-do-you-know-about",
    "title": "Welcome to CEVE 543!!",
    "section": "What other climate hazards do you know about?",
    "text": "What other climate hazards do you know about?\n\nTake a moment to think, write it down, and then we’ll share."
  },
  {
    "objectID": "slides/lecture01-welcome.html#how-do-we-manage-climate-risks",
    "href": "slides/lecture01-welcome.html#how-do-we-manage-climate-risks",
    "title": "Welcome to CEVE 543!!",
    "section": "How do we manage climate risks?",
    "text": "How do we manage climate risks?\n\n\nReduce emissions to prevent future climate change (“mitigation”)\nReal-time monitoring and forecasting\nBuilding codes and design standards\nInsurance\nand much more!"
  },
  {
    "objectID": "slides/lecture01-welcome.html#bayesian-decision-theory",
    "href": "slides/lecture01-welcome.html#bayesian-decision-theory",
    "title": "Welcome to CEVE 543!!",
    "section": "Bayesian Decision Theory",
    "text": "Bayesian Decision Theory\nExpected reward \\(R\\) (equivalently utility, loss, etc.) for taking some decision \\(a \\in \\mathcal{A}\\): \\[\n\\mathbb{E}(R(a)) = \\int_{\\mathcal{S}} R(a, {\\bf{s}}) p({\\bf{s}}) d{\\bf{s}}\n\\] Crucial insight: \\[\n\\mathbb{E}(R(a)) \\neq R(a, \\mathbb{E}(\\bf{s}))\n\\]"
  },
  {
    "objectID": "slides/lecture01-welcome.html#implications",
    "href": "slides/lecture01-welcome.html#implications",
    "title": "Welcome to CEVE 543!!",
    "section": "Implications",
    "text": "Implications\n\n\nWe often care about extremes\nUncertainty (especially of extremes) matters\nWhat makes a “good” estimates of \\(p(\\bf{s})\\)?\n\nPhysically accurate / realistic\nHigh spatial and temporal resolution to quantify impacts on people and infrastructure\nLarge ensemble sizes to quantify uncertainty\nMultiple scenarios (of “deep” uncertainties)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#fat-tails",
    "href": "slides/lecture01-welcome.html#fat-tails",
    "title": "Welcome to CEVE 543!!",
    "section": "Fat tails",
    "text": "Fat tails\n\nBonnafous et al. (2017)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#quasi-periodic-oscillations",
    "href": "slides/lecture01-welcome.html#quasi-periodic-oscillations",
    "title": "Welcome to CEVE 543!!",
    "section": "Quasi-periodic oscillations",
    "text": "Quasi-periodic oscillations\n\nDoss-Gollin et al. (2019)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#nonstationarity",
    "href": "slides/lecture01-welcome.html#nonstationarity",
    "title": "Welcome to CEVE 543!!",
    "section": "Nonstationarity",
    "text": "Nonstationarity\n\nFagnant et al. (2020)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#vary-on-multiple-temporal-scales",
    "href": "slides/lecture01-welcome.html#vary-on-multiple-temporal-scales",
    "title": "Welcome to CEVE 543!!",
    "section": "Vary on multiple temporal scales",
    "text": "Vary on multiple temporal scales\n\nDoss-Gollin et al. (2019)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#spatial-structure",
    "href": "slides/lecture01-welcome.html#spatial-structure",
    "title": "Welcome to CEVE 543!!",
    "section": "Spatial structure",
    "text": "Spatial structure\n\nFarnham et al. (2018)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#emphasis-on-extremes",
    "href": "slides/lecture01-welcome.html#emphasis-on-extremes",
    "title": "Welcome to CEVE 543!!",
    "section": "Emphasis on extremes",
    "text": "Emphasis on extremes\n\nDoss-Gollin & Keller (2023)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#deep-uncertainty",
    "href": "slides/lecture01-welcome.html#deep-uncertainty",
    "title": "Welcome to CEVE 543!!",
    "section": "Deep Uncertainty",
    "text": "Deep Uncertainty\n\nWalker et al. (2013)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#syllabus",
    "href": "slides/lecture01-welcome.html#syllabus",
    "title": "Welcome to CEVE 543!!",
    "section": "Syllabus",
    "text": "Syllabus\nSyllabus"
  },
  {
    "objectID": "slides/lecture01-welcome.html#lectures",
    "href": "slides/lecture01-welcome.html#lectures",
    "title": "Welcome to CEVE 543!!",
    "section": "Lectures",
    "text": "Lectures\n\nTests will cover material from lectures and labs\n\nSlides will be posted ahead of time on course website (see instructions for printing to PDF)\n\nOccasional readings (assigned ahead of time on Canvas)\nI am not a mind reader! Ask questions."
  },
  {
    "objectID": "slides/lecture01-welcome.html#labs-10",
    "href": "slides/lecture01-welcome.html#labs-10",
    "title": "Welcome to CEVE 543!!",
    "section": "Labs (10%)",
    "text": "Labs (10%)\n\nBuild your hands-on computational skills\nMost weeks, generally Friday\nApply conecpts from lectures to simple problems\nGraded on a 3 point scale\nDue one week after the in-class lab; solutions will be posted and discussed so no late submissions (turn in what you have)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#tests-40",
    "href": "slides/lecture01-welcome.html#tests-40",
    "title": "Welcome to CEVE 543!!",
    "section": "Tests (40%)",
    "text": "Tests (40%)\n\nMaterial from lecture, assigned readings, and labs\nAlways a review session"
  },
  {
    "objectID": "slides/lecture01-welcome.html#projects-40",
    "href": "slides/lecture01-welcome.html#projects-40",
    "title": "Welcome to CEVE 543!!",
    "section": "Projects (40%)",
    "text": "Projects (40%)\n\nApply concepts from class and lab to a more complex and open-ended problem\nEach module (except intro) centers on a project\n\nThree rainfall-focused projects planned:\n\nDownscaling\nFrequency analysis\nWeather typing"
  },
  {
    "objectID": "slides/lecture01-welcome.html#participation-10",
    "href": "slides/lecture01-welcome.html#participation-10",
    "title": "Welcome to CEVE 543!!",
    "section": "Participation (10%)",
    "text": "Participation (10%)\nSome ways to participate include:\n\nAttending every class\nAsking questions in class\nAnswering questions on Canvas\nComing to office hours\n\nWe will co-grade your participation for every module"
  },
  {
    "objectID": "slides/lecture01-welcome.html#job-opportunities",
    "href": "slides/lecture01-welcome.html#job-opportunities",
    "title": "Welcome to CEVE 543!!",
    "section": "Job opportunities",
    "text": "Job opportunities\nGrowing climate analytics opportunities in:\n\nInsurance\nFinance\nAgriculture\nEngineering\n\nAnd more! These require an understanding of climate, probability, statistics, coding, and communication."
  },
  {
    "objectID": "slides/lecture01-welcome.html#pre-requistes-linear-algebra",
    "href": "slides/lecture01-welcome.html#pre-requistes-linear-algebra",
    "title": "Welcome to CEVE 543!!",
    "section": "Pre-requistes: Linear Algebra",
    "text": "Pre-requistes: Linear Algebra\nYou need basic matrix notation and multiplication, but not much more. Let \\[\nA = \\left[ \\begin{matrix} a & b \\\\ c & d \\end{matrix} \\right], \\quad\nB = \\left[ \\begin{matrix} e & f \\\\ g & h \\end{matrix} \\right], \\quad\nx = \\left[ \\begin{matrix} k \\\\ \\ell \\end{matrix} \\right], \\quad\n\\]\nYou should be able to (with note-checking as needed!) figure out:\n\n\n\n\\(A_{2,1}\\)\n\\(A + B\\)\n\\(AB\\)\n\n\n\n\\(A x\\)\n\\(x^T x\\)\n\\(x x^T\\)"
  },
  {
    "objectID": "slides/lecture01-welcome.html#pre-requisites-probability-and-statistics",
    "href": "slides/lecture01-welcome.html#pre-requisites-probability-and-statistics",
    "title": "Welcome to CEVE 543!!",
    "section": "Pre-requisites: Probability and Statistics",
    "text": "Pre-requisites: Probability and Statistics\nYou should have a course in applied statistics. You should be able to:\n\nCompute summary statistics of a sample\nDefine joint, marginal, and conditional distributions\nUnderstand probability density functions, quantiles, and cumulative distribution functions\nExplain a few probability distributions and where they are appropriate\nPerform and interpret linear regressions"
  },
  {
    "objectID": "slides/lecture01-welcome.html#pre-requisites-coding",
    "href": "slides/lecture01-welcome.html#pre-requisites-coding",
    "title": "Welcome to CEVE 543!!",
    "section": "Pre-requisites: Coding",
    "text": "Pre-requisites: Coding\nWe will use the Julia programming language. I think you’ll find it easy and fun to learn!\n\nNo experience in Julia is expected\nSome prior experience coding (R, Python, Matlab, C, etc.) is suggested\nIf you have no prior coding experience, you will need to put in extra effort to learn the basics"
  },
  {
    "objectID": "slides/lecture01-welcome.html#questions",
    "href": "slides/lecture01-welcome.html#questions",
    "title": "Welcome to CEVE 543!!",
    "section": "Questions?",
    "text": "Questions?\n\nWednesday: “What drives uncertain climate hazard?”\nFriday: “Lab 01: Setting up Julia, GitHub, and Quarto”"
  },
  {
    "objectID": "slides/lecture01-welcome.html#references",
    "href": "slides/lecture01-welcome.html#references",
    "title": "Welcome to CEVE 543!!",
    "section": "References",
    "text": "References\n\n\nCEVE 543, Data Science for Climate Risk Assessment, August 21, 2023\n\n\n\nBonnafous, L., Lall, U., & Siegel, J. (2017). A water risk index for portfolio exposure to climatic extremes: Conceptualization and an application to the mining industry. Hydrology and Earth System Sciences, 21(4), 2075–2106. https://doi.org/f96k67\n\n\nDoss-Gollin, J., & Keller, K. (2023). A subjective Bayesian framework for synthesizing deep uncertainties in climate risk management. Earth’s Future, 11(1). https://doi.org/10.1029/2022EF003044\n\n\nDoss-Gollin, J., Farnham, D. J., Steinschneider, S., & Lall, U. (2019). Robust adaptation to multiscale climate variability. Earth’s Future, 7(7), 734–747. https://doi.org/10.1029/2019ef001154\n\n\nFagnant, C., Gori, A., Sebastian, A., Bedient, P. B., & Ensor, K. B. (2020). Characterizing spatiotemporal trends in extreme precipitation in Southeast Texas. Natural Hazards, 104(2), 1597–1621. https://doi.org/10.1007/s11069-020-04235-x\n\n\nFarnham, D. J., Doss-Gollin, J., & Lall, U. (2018). Regional extreme precipitation events: Robust inference from credibly simulated GCM variables. Water Resources Research, 54(6). https://doi.org/10.1002/2017wr021318\n\n\nWalker, W. E., Lempert, R. J., & Kwakkel, J. H. (2013). Deep Uncertainty. In S. I. Gass & M. C. Fu (Eds.), Encyclopedia of Operations Research and Management Science (pp. 395–402). Boston, MA: Springer US. https://doi.org/10.1007/978-1-4419-1153-7_1140"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "This page is currently empty, because there are not yet any frequently asked questions!"
  },
  {
    "objectID": "tutorials/julia-basics.html",
    "href": "tutorials/julia-basics.html",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "This tutorial will give some examples of basic Julia commands and syntax."
  },
  {
    "objectID": "tutorials/julia-basics.html#overview",
    "href": "tutorials/julia-basics.html#overview",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "This tutorial will give some examples of basic Julia commands and syntax."
  },
  {
    "objectID": "tutorials/julia-basics.html#getting-help",
    "href": "tutorials/julia-basics.html#getting-help",
    "title": "Tutorial: Julia Basics",
    "section": "Getting Help",
    "text": "Getting Help\n\nCheck out the official documentation for Julia: https://docs.julialang.org/en/v1/.\nStack Overflow is a commonly-used resource for programming assistance.\nAt a code prompt or in the REPL, you can always type ?functionname to get help."
  },
  {
    "objectID": "tutorials/julia-basics.html#further-resources",
    "href": "tutorials/julia-basics.html#further-resources",
    "title": "Tutorial: Julia Basics",
    "section": "Further Resources",
    "text": "Further Resources\nThere are lots of great resources on programming and Julia. Here is a curated list of some particularly helpful tools.\n\n\n\n\n\n\nNote\n\n\n\nSome of these tutorials provide their own instructions on how to install Julia. Please follow the instructions provided in this course\n\n\n\nJulia for Nervous Begineers: A free course on JuliaAcademy for people who are hesitant but curious about learning to write code in Julia.\nFastTrack to Julia cheatsheet\nPlotting cheatsheet\nIntroduction to Computational Thinking: a great Julia-based course at MIT covering applied mathematics and… computational thinking\nComprehensive Julia Tutorials: YouTube playlist covering a variety of Julia topics, starting with an introduciton to the language."
  },
  {
    "objectID": "tutorials/julia-basics.html#comments",
    "href": "tutorials/julia-basics.html#comments",
    "title": "Tutorial: Julia Basics",
    "section": "Comments",
    "text": "Comments\nComments hide statements from the interpreter or compiler. It’s a good idea to liberally comment your code so readers (including yourself!) know why your code is structured and written the way it is. Single-line comments in Julia are preceded with a #. Multi-line comments are preceded with #= and ended with =#"
  },
  {
    "objectID": "tutorials/julia-basics.html#suppressing-output",
    "href": "tutorials/julia-basics.html#suppressing-output",
    "title": "Tutorial: Julia Basics",
    "section": "Suppressing Output",
    "text": "Suppressing Output\nYou can suppress output using a semi-colon (;).\n\n4 + 8;\n\nThat didn’t show anything, as opposed to:\n\n4 + 8\n\n12"
  },
  {
    "objectID": "tutorials/julia-basics.html#variables",
    "href": "tutorials/julia-basics.html#variables",
    "title": "Tutorial: Julia Basics",
    "section": "Variables",
    "text": "Variables\nVariables are names which correspond to some type of object. These names are bound to objects (and hence their values) using the = operator.\n\nx = 5\n\n5\n\n\nVariables can be manipulated with standard arithmetic operators.\n\n4 + x\n\n9\n\n\nAnother advantage of Julia is the ability to use Greek letters (or other Unicode characters) as variable names. For example, type a backslash followed by the name of the Greek letter (i.e. \\alpha) followed by TAB.\n\nα = 3\n\n3\n\n\nYou can also include subscripts or superscripts in variable names using \\_ and \\^, respectively, followed by TAB. If using a Greek letter followed by a sub- or super-script, make sure you TAB following the name of the letter before the sub- or super-script. Effectively, TAB after you finish typing the name of each \\character.\n\nβ₁ = 10 # The name of this variable was entered with \\beta + TAB + \\_1 + TAB\n\n10\n\n\nHowever, try not to overwrite predefined names! For example, you might not want to use π as a variable name…\n\nπ\n\nπ = 3.1415926535897...\n\n\nIn the grand scheme of things, overwriting π is not a huge deal unless you want to do some trigonometry. However, there are more important predefined functions and variables that you may want to be aware of. Always check that a variable or function name is not predefined!"
  },
  {
    "objectID": "tutorials/julia-basics.html#data-types",
    "href": "tutorials/julia-basics.html#data-types",
    "title": "Tutorial: Julia Basics",
    "section": "Data Types",
    "text": "Data Types\nEach datum (importantly, not the variable which is bound to it) has a data type. Julia types are similar to C types, in that they require not only the type of data (Int, Float, String, etc), but also the precision (which is related to the amount of memory allocated to the variable). Issues with precision won’t be a big deal in this class, though they matter when you’re concerned about performance vs. decimal accuracy of code.\nYou can identify the type of a variable or expression with the typeof() function.\n\ntypeof(\"This is a string.\")\n\nString\n\n\n\ntypeof(x)\n\nInt64\n\n\n\nNumeric types\nA key distinction is between an integer type (or Int) and a floating-point number type (or float). Integers only hold whole numbers, while floating-point numbers correspond to numbers with fractional (or decimal) parts. For example, 9 is an integer, while 9.25 is a floating point number. The difference between the two has to do with the way the number is stored in memory. 9, an integer, is handled differently in memory than 9.0, which is a floating-point number, even though they’re mathematically the same value.\n\ntypeof(9)\n\nInt64\n\n\n\ntypeof(9.25)\n\nFloat64\n\n\nSometimes certain function specifications will require you to use a Float variable instead of an Int. One way to force an Int variable to be a Float is to add a decimal point at the end of the integer.\n\ntypeof(9.)\n\nFloat64\n\n\n\n\nStrings\nStrings hold characters, rather than numeric values. Even if a string contains what seems like a number, it is actually stored as the character representation of the digits. As a result, you cannot use arithmetic operators (for example) on this datum.\n\n\"5\" + 5\n\nLoadError: MethodError: no method matching +(::String, ::Int64)\n\n\u001b[0mClosest candidates are:\n\u001b[0m  +(::Any, ::Any, \u001b[91m::Any\u001b[39m, \u001b[91m::Any...\u001b[39m)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m\u001b[4moperators.jl:578\u001b[24m\u001b[39m\n\u001b[0m  +(\u001b[91m::T\u001b[39m, ::T) where T&lt;:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m\u001b[4mint.jl:87\u001b[24m\u001b[39m\n\u001b[0m  +(\u001b[91m::LinearAlgebra.UniformScaling\u001b[39m, ::Number)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[35mLinearAlgebra\u001b[39m \u001b[90m~/.julia/juliaup/julia-1.9.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.9/LinearAlgebra/src/\u001b[39m\u001b[90m\u001b[4muniformscaling.jl:144\u001b[24m\u001b[39m\n\u001b[0m  ...\n\n\nHowever, you can try to tell Julia to interpret a string encoding a numeric character as a numeric value using the parse() function. This can also be used to encode a numeric data as a string.\n\nparse(Int64, \"5\") + 5\n\n10\n\n\nTwo strings can be concatenated using *:\n\n\"Hello\" * \" \" * \"there\"\n\n\"Hello there\"\n\n\n\n\nBooleans\nBoolean variables (or Bools) are logical variables, that can have true or false as values.\n\nb = true\n\ntrue\n\n\nNumerical comparisons, such as ==, !=, or &lt;, return a Bool.\n\nc = 9 &gt; 11\n\nfalse\n\n\nBools are important for logical flows, such as if-then-else blocks or certain types of loops."
  },
  {
    "objectID": "tutorials/julia-basics.html#mathematical-operations",
    "href": "tutorials/julia-basics.html#mathematical-operations",
    "title": "Tutorial: Julia Basics",
    "section": "Mathematical operations",
    "text": "Mathematical operations\nAddition, subtraction, multiplication, and division work as you would expect. Just pay attention to types! The type of the output is influenced by the type of the inputs: adding or multiplying an Int by a Float will always result in a Float, even if the Float is mathematically an integer. Division is a little special: dividing an Int by another Int will still return a float, because Julia doesn’t know ahead of time if the denominator is a factor of the numerator.\n\n3 + 5\n\n8\n\n\n\n3 * 2\n\n6\n\n\n\n3 * 2.\n\n6.0\n\n\n\n6 - 2\n\n4\n\n\n\n9 / 3\n\n3.0\n\n\nRaising a base to an exponent uses ^, not **.\n\n3^2\n\n9\n\n\nJulia allows the use of updating operators to simplify updating a variable in place (in other words, using x += 5 instead of x = x + 5.\n\nBoolean algebra\nLogical operations can be used on variables of type Bool. Typical operators are && (and), || (or), and ! (not).\n\ntrue && true\n\ntrue\n\n\n\ntrue && false\n\nfalse\n\n\n\ntrue || false\n\ntrue\n\n\n\n!true\n\nfalse\n\n\nComparisons can be chained together.\n\n3 &lt; 4 || 8 == 12\n\ntrue\n\n\nWe didn’t do this above, since Julia doesn’t require it, but it’s easier to understand these types of compound expressions if you use parentheses to signal the order of operations. This helps with debugging!\n\n(3 &lt; 4) || (8 == 12)\n\ntrue"
  },
  {
    "objectID": "tutorials/julia-basics.html#data-structures",
    "href": "tutorials/julia-basics.html#data-structures",
    "title": "Tutorial: Julia Basics",
    "section": "Data Structures",
    "text": "Data Structures\nData structures are containers which hold multiple values in a convenient fashion. Julia has several built-in data structures, and there are many extensions provided in additional packages.\n\nTuples\nTuples are collections of values. Julia will pay attention to the types of these values, but they can be mixed. Tuples are also immutable: their values cannot be changed once they are defined.\nTuples can be defined by just separating values with commas.\n\ntest_tuple = 4, 5, 6\n\n(4, 5, 6)\n\n\nTo access a value, use square brackets and the desired index. Note: Julia indexing starts at 1, not 0!\n\ntest_tuple[1]\n\n4\n\n\nAs mentioned above, tuples are immutable. What happens if we try to change the value of the first element of test_tuple?\n\ntest_tuple[1] = 5\n\nLoadError: MethodError: no method matching setindex!(::Tuple{Int64, Int64, Int64}, ::Int64, ::Int64)\n\n\nTuples also do not have to hold the same types of values.\n\ntest_tuple_2 = 4, 5., 'h'\ntypeof(test_tuple_2)\n\nTuple{Int64, Float64, Char}\n\n\nTuples can also be defined by enclosing the values in parentheses.\ntest_tuple_3 = (4, 5., 'h')\ntypeof(test_tuple_3)\n\n\nArrays\nArrays also hold multiple values, which can be accessed based on their index position. Arrays are commonly defined using square brackets.\n\ntest_array = [1, 4, 7, 8]\ntest_array[2]\n\n4\n\n\nUnlike tuples, arrays are mutable, and their contained values can be changed later.\n\ntest_array[1] = 6\ntest_array\n\n4-element Vector{Int64}:\n 6\n 4\n 7\n 8\n\n\nArrays also can hold multiple types. Unlike tuples, this causes the array to no longer care about types at all.\n\ntest_array_2 = [6, 5., 'h']\ntypeof(test_array_2)\n\n\nVector{Any} (alias for Array{Any, 1})\n\n\n\nCompare this with test_array:\n\ntypeof(test_array)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\n\nDictionaries\nInstead of using integer indices based on position, dictionaries are indexed by keys. They are specified by passing key-value pairs to the Dict() method.\n\ntest_dict = Dict(\"A\"=&gt;1, \"B\"=&gt;2)\ntest_dict[\"B\"]\n\n2\n\n\n\n\nComprehensions\nCreating a data structure with more than a handful of elements can be tedious to do by hand. If your desired array follows a certain pattern, you can create structures using a comprehension. Comprehensions iterate over some other data structure (such as an array) implicitly and populate the new data structure based on the specified instructions.\n\n[i^2 for i in 0:1:5]\n\n6-element Vector{Int64}:\n  0\n  1\n  4\n  9\n 16\n 25\n\n\nFor dictionaries, make sure that you also specify the keys.\n\nDict(string(i) =&gt; i^2 for i in 0:1:5)\n\nDict{String, Int64} with 6 entries:\n  \"4\" =&gt; 16\n  \"1\" =&gt; 1\n  \"5\" =&gt; 25\n  \"0\" =&gt; 0\n  \"2\" =&gt; 4\n  \"3\" =&gt; 9"
  },
  {
    "objectID": "tutorials/julia-basics.html#functions",
    "href": "tutorials/julia-basics.html#functions",
    "title": "Tutorial: Julia Basics",
    "section": "Functions",
    "text": "Functions\nA function is an object which accepts a tuple of arguments and maps them to a return value. In Julia, functions are defined using the following syntax.\n\nfunction my_actual_function(x, y)\n    return x + y\nend\nmy_actual_function(3, 5)\n\n8\n\n\nFunctions in Julia do not require explicit use of a return statement. They will return the last expression evaluated in their definition. However, it’s good style to explicitly return function outputs. This improves readability and debugging, especially when functions can return multiple expressions based on logical control flows (if-then-else blocks).\nFunctions in Julia are objects, and can be treated like other objects. They can be assigned to new variables or passed as arguments to other functions.\n\ng = my_actual_function\ng(3, 5)\n\n8\n\n\n\nfunction function_of_functions(f, x, y)\n    return f(x, y)\nend\nfunction_of_functions(g, 3, 5)\n\n8\n\n\n\nShort and Anonymous Functions\nIn addition to the long form of the function definition shown above, simple functions can be specified in more compact forms when helpful.\nThis is the short form:\n\nh₁(x) = x^2 # make the subscript using \\_1 + &lt;TAB&gt;\nh₁(4)\n\n16\n\n\nThis is the anonymous form:\n\nx-&gt;sin(x)\n(x-&gt;sin(x))(π/4)\n\n0.7071067811865475\n\n\n\n\nMutating Functions\nThe convention in Julia is that functions should not modify (or mutate) their input data. The reason for this is to ensure that the data is preserved. Mutating functions are mainly appropriate for applications where performance needs to be optimized, and making a copy of the input data would be too memory-intensive.\nIf you do write a mutating function in Julia, the convention is to add a ! to its name, like my_mutating_function!(x).\n\n\nOptional arguments\nThere are two extremes with regard to function parameters which do not always need to be changed. The first is to hard-code them into the function body, which has a clear downside: when you do want to change them, the function needs to be edited directly. The other extreme is to treat them as regular arguments, passing them every time the function is called. This has the downside of potentially creating bloated function calls, particularly when there is a standard default value that makes sense for most function evaluations.\nMost modern languages, including Julia, allow an alternate solution, which is to make these arguments optional. This involves setting a default value, which is used unless the argument is explicitly defined in a function call.\n\nfunction setting_optional_arguments(x, y, c=0.5)\n    return c * (x + y)\nend\n\nsetting_optional_arguments (generic function with 2 methods)\n\n\nIf we want to stick with the fixed value \\(c=0.5\\), all we have to do is call setting_optional_arguments with the x and y arguments.\n\nsetting_optional_arguments(3, 5)\n\n4.0\n\n\nOtherwise, we can pass a new value for c.\n\nsetting_optional_arguments(3, 5, 2)\n\n16\n\n\n\n\nPassing data structures as arguments\nInstead of passing variables individually, it may make sense to pass a data structure, such as an array or a tuple, and then unpacking within the function definition. This is straightforward in long form: access the appropriate elements using their index.\nIn short or anonymous form, there is a trick which allows the use of readable variables within the function definition.\n\nh₂((x,y)) = x*y # enclose the input arguments in parentheses to tell Julia to expect and unpack a tuple\n\nh₂ (generic function with 1 method)\n\n\n\nh₂((2, 3)) # this works perfectly, as we passed in a tuple\n\n6\n\n\n\nh₂(2, 3) # this gives an error, as h₂ expects a single tuple, not two different numeric values\n\nLoadError: MethodError: no method matching h₂(::Int64, ::Int64)\n\n\u001b[0mClosest candidates are:\n\u001b[0m  h₂(::Any)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[32mMain\u001b[39m \u001b[90m\u001b[4mIn[50]:1\u001b[24m\u001b[39m\n\n\n\nh₂([3, 10]) # this also works with arrays instead of tuples\n\n30\n\n\n\n\nVectorized operations\nJulia uses dot syntax to vectorize an operation and apply it element-wise across an array.\nFor example, to calculate the square root of 3:\n\nsqrt(3)\n\n1.7320508075688772\n\n\nTo calculate the square roots of every integer between 1 and 5:\n\nsqrt.([1, 2, 3, 4, 5])\n\n5-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n 2.23606797749979\n\n\nThe same dot syntax is used for arithmetic operations over arrays, since these operations are really functions.\n\n[1, 2, 3, 4] .* 2\n\n4-element Vector{Int64}:\n 2\n 4\n 6\n 8\n\n\nVectorization can be faster and is more concise to write and read than applying the same function to multiple variables or objects explicitly, so take advantage!\n\n\nReturning multiple values\nYou can return multiple values by separating them with a comma. This implicitly causes the function to return a tuple of values.\n\nfunction return_multiple_values(x, y)\n    return x + y, x * y\nend\nreturn_multiple_values(3, 5)\n\n(8, 15)\n\n\nThese values can be unpacked into multiple variables.\n\nn, ν = return_multiple_values(3, 5)\nn\n\n8\n\n\n\nν\n\n15\n\n\n\n\nReturning nothing\nSometimes you don’t want a function to return any values at all. For example, you might want a function that only prints a string to the console.\n\nfunction print_some_string(x)\n    println(\"x: $x\")\n    return nothing\nend\nprint_some_string(42)\n\nx: 42"
  },
  {
    "objectID": "tutorials/julia-basics.html#printing-text-output",
    "href": "tutorials/julia-basics.html#printing-text-output",
    "title": "Tutorial: Julia Basics",
    "section": "Printing Text Output",
    "text": "Printing Text Output\nThe Text() function returns its argument as a plain text string. Notice how this is different from evaluating a string!\n\nText(\"I'm printing a string.\")\n\nI'm printing a string.\n\n\nText() is used in this tutorial as it returns the string passed to it. To print directly to the console, use println().\n\nprintln(\"I'm writing a string to the console.\")\n\nI'm writing a string to the console.\n\n\n\nPrinting Variables In a String\nWhat if we want to include the value of a variable inside of a string? We do this using string interpolation, using $variablename inside of the string.\n\nbar = 42\nText(\"Now I'm printing a variable: $bar\")\n\nNow I'm printing a variable: 42"
  },
  {
    "objectID": "tutorials/julia-basics.html#control-flows",
    "href": "tutorials/julia-basics.html#control-flows",
    "title": "Tutorial: Julia Basics",
    "section": "Control Flows",
    "text": "Control Flows\nOne of the tricky things about learning a new programming language can be getting used to the specifics of control flow syntax. These types of flows include conditional if-then-else statements or loops.\n\nConditional Blocks\nConditional blocks allow different pieces of code to be evaluated depending on the value of a boolean expression or variable. For example, if we wanted to compute the absolute value of a number, rather than using abs():\n\nfunction our_abs(x)\n    if x &gt;= 0\n        return x\n    else\n        return -x\n    end\nend\n\nour_abs (generic function with 1 method)\n\n\n\nour_abs(4)\n\n4\n\n\n\nour_abs(-4)\n\n4\n\n\nTo nest conditional statements, use elseif.\n\nfunction test_sign(x)\n    if x &gt; 0\n        return Text(\"x is positive.\")\n    elseif x &lt; 0\n        return Text(\"x is negative.\")\n    else\n        return Text(\"x is zero.\")\n    end\nend\n\ntest_sign (generic function with 1 method)\n\n\n\ntest_sign(-5)\n\nx is negative.\n\n\n\ntest_sign(0)\n\nx is zero.\n\n\n\n\nLoops\nLoops allow expressions to be evaluated repeatedly until they are terminated. The two main types of loops are while loops and for loops.\n\nWhile loops\nwhile loops continue to evaluate an expression so long as a specified boolean condition is true. This is useful when you don’t know how many iterations it will take for the desired goal to be reached.\n\nfunction compute_factorial(x)\n    factorial = 1\n    while (x &gt; 1)\n        factorial *= x\n        x -= 1\n    end\n    return factorial\nend\ncompute_factorial(5)\n\n120\n\n\n\nWhile loops can easily turn into infinite loops if the condition is never meaningfully updated. Be careful, and look there if your programs are getting stuck. Also, If the expression in a while loop is false when the loop is reached, the loop will never be evaluated.\n\n\n\nFor loops\nfor loops run for a finite number of iterations, based on some defined index variable.\n\nfunction add_some_numbers(x)\n    total_sum = 0 # initialize at zero since we're adding\n    for i in 1:x # the counter i is updated every iteration\n        total_sum += i\n    end\n    return total_sum\nend\nadd_some_numbers(4)\n\n10\n\n\nfor loops can also iterate over explicitly passed containers, rather than iterating over an incrementally-updated index sequence. Use the in keyword when defining the loop.\n\nfunction add_passed_numbers(set)\n    total_sum = 0\n    for i in set # this is the syntax we use when we want i to correspond to different container values\n        total_sum += i\n    end\n    return total_sum\nend\nadd_passed_numbers([1, 3, 5])\n\n9"
  },
  {
    "objectID": "tutorials/julia-basics.html#linear-algebra",
    "href": "tutorials/julia-basics.html#linear-algebra",
    "title": "Tutorial: Julia Basics",
    "section": "Linear algebra",
    "text": "Linear algebra\nMatrices are defined in Julia as 2d arrays. Unlike basic arrays, matrices need to contain the same data type so Julia knows what operations are allowed. When defining a matrix, use semicolons to separate rows. Row elements should not be separated by commas.\n\ntest_matrix = [1 2 3; 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nYou can also specify matrices using spaces and newlines.\n\ntest_matrix_2 = [\n    1 2 3\n    4 5 6\n]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nFinally, matrices can be created using comprehensions by separating the inputs by a comma.\n\n[i*j for i in 1:1:5, j in 1:1:5]\n\n5×5 Matrix{Int64}:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n\n\nVectors are treated as 1d matrices.\n\ntest_row_vector = [1 2 3]\n\n1×3 Matrix{Int64}:\n 1  2  3\n\n\n\ntest_col_vector = [1; 2; 3]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\nMany linear algebra operations on vectors and matrices can be loaded using the LinearAlgebra package."
  },
  {
    "objectID": "tutorials/julia-basics.html#package-management",
    "href": "tutorials/julia-basics.html#package-management",
    "title": "Tutorial: Julia Basics",
    "section": "Package management",
    "text": "Package management\nSometimes you might need functionality that does not exist in base Julia. Julia handles packages using the Pkg package manager. After finding a package which has the functions that you need, you have two options:\n\nUse the package management prompt in the Julia REPL (the standard Julia interface; what you get when you type julia in your terminal). Enter this by typing ] at the standard green Julia prompt julia&gt;. This will become a blue pkg&gt;. You can then add new packages using add packagename.\nFrom the standard prompt, enter import Pkg; Pkg.add(packagename). The packagename package can then be used by adding using packagename to the start of the script."
  },
  {
    "objectID": "tutorials/julia-plots.html",
    "href": "tutorials/julia-plots.html",
    "title": "Tutorial: Making Plots with Julia",
    "section": "",
    "text": "This tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is Plots.jl, but there are some others that provide useful features."
  },
  {
    "objectID": "tutorials/julia-plots.html#overview",
    "href": "tutorials/julia-plots.html#overview",
    "title": "Tutorial: Making Plots with Julia",
    "section": "",
    "text": "This tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is Plots.jl, but there are some others that provide useful features."
  },
  {
    "objectID": "tutorials/julia-plots.html#some-resources",
    "href": "tutorials/julia-plots.html#some-resources",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Some Resources",
    "text": "Some Resources\n\nPlots.jl useful tips\nPlots.jl examples\nPlot attributes\nAxis attributes\nColor names"
  },
  {
    "objectID": "tutorials/julia-plots.html#demos",
    "href": "tutorials/julia-plots.html#demos",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Demos",
    "text": "Demos\n\nusing Plots\nusing Random\nRandom.seed!(1);\n\n\nLine Plots\nTo generate a basic line plot, use plot.\n\ny = rand(5)\nplot(y, label=\"original data\", legend=:topright)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere’s a lot of customization here that can occur, a lot of which is discussed in the docs or can be found with some Googling.\n\n\nAdding Plot Elements\nNow we can add some other lines and point markers.\n\ny2 = rand(5)\ny3 = rand(5)\nplot!(y2, label=\"new data\")\nscatter!(y3, label=\"even more data\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemember that an exclamation mark (!) at the end of a function name means that function modifies an object in-place, so plot! and scatter! modify the current plotting object, they don’t create a new plot.\n\n\nRemoving Plot Elements\nSometimes we want to remove legends, axes, grid lines, and ticks.\n\nplot!(legend=false, axis=false, grid=false, ticks=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nAspect Ratio\nIf we want to have a square aspect ratio, use ratio = 1.\n\nv = rand(5)\nplot(v, ratio=1, legend=false)\nscatter!(v)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHeatmaps\nA heatmap is effectively a plotted matrix with colors chosen according to the values. Use clim to specify a fixed range for the color limits.\n\nA = rand(10, 10)\nheatmap(A, clim=(0, 1), ratio=1, legend=false, axis=false, ticks=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\nM = [ 0 1 0; 0 0 0; 1 0 0]\nwhiteblack = [RGBA(1,1,1,0), RGB(0,0,0)]\nheatmap(c=whiteblack, M, aspect_ratio = 1, ticks=.5:3.5, lims=(.5,3.5), gridalpha=1, legend=false, axis=false, ylabel=\"i\", xlabel=\"j\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Colors\n\nusing Colors\n\nmycolors = [colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\"]\nA = [i for i=50:300, j=1:100]\nheatmap(A, c=mycolors, clim=(1,300))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\nPlotting Areas Under Curves\n\ny = rand(10)\nplot(y, fillrange= y.*0 .+ .5, label= \"above/below 1/2\", legend =:top)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx = LinRange(0,2,100)\ny1 = exp.(x)\ny2 = exp.(1.3 .* x)\nplot(x, y1, fillrange = y2, fillalpha = 0.35, c = 1, label = \"Confidence band\", legend = :topleft)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx = -3:.01:3\nareaplot(x, exp.(-x.^2/2)/√(2π),alpha=.25,legend=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nM = [1 2 3; 7 8 9; 4 5 6; 0 .5 1.5]\nareaplot(1:3, M, seriescolor = [:red :green :blue ], fillalpha = [0.2 0.3 0.4])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing SpecialFunctions\nf = x-&gt;exp(-x^2/2)/√(2π)\nδ = .01\nplot()\nx = √2 .* erfinv.(2 .*(δ/2 : δ : 1) .- 1)\nareaplot(x, f.(x), seriescolor=[ :red,:blue], legend=false)\nplot!(x, f.(x),c=:black)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Shapes\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\ncircle(r,x,y) = (θ = LinRange(0,2π,500); (x.+r.*cos.(θ), y.+r.*sin.(θ)))\nplot(circle(5,0,0), ratio=1, c=:red, fill=true)\nplot!(rectangle(5*√2,5*√2,-2.5*√2,-2.5*√2),c=:white,fill=true,legend=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Distributions\nThe StatsPlots.jl package is very useful for making various plots of probability distributions.\n\nusing Distributions, StatsPlots\nplot(Normal(2, 5))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscatter(LogNormal(0.8, 1.5))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also use this functionality to plot distributions of data in tabular data structures like DataFrames.\n\nusing DataFrames\ndat = DataFrame(a = 1:10, b = 10 .+ rand(10), c = 10 .* rand(10))\n@df dat density([:b :c], color=[:black :red])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEditing Plots Manually\n\npl = plot(1:4,[1, 4, 9, 16])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npl.attr\n\nRecipesPipeline.DefaultsDict with 30 entries:\n  :dpi                      =&gt; 96\n  :background_color_outside =&gt; :match\n  :plot_titlefontvalign     =&gt; :vcenter\n  :warn_on_unsupported      =&gt; true\n  :background_color         =&gt; RGBA{Float64}(1.0,1.0,1.0,1.0)\n  :inset_subplots           =&gt; nothing\n  :size                     =&gt; (672, 480)\n  :display_type             =&gt; :auto\n  :overwrite_figure         =&gt; true\n  :html_output_format       =&gt; :svg\n  :plot_titlefontfamily     =&gt; :match\n  :plot_titleindex          =&gt; 0\n  :foreground_color         =&gt; RGB{N0f8}(0.0,0.0,0.0)\n  :window_title             =&gt; \"Plots.jl\"\n  :plot_titlefontrotation   =&gt; 0.0\n  :extra_plot_kwargs        =&gt; Dict{Any, Any}()\n  :pos                      =&gt; (0, 0)\n  :plot_titlefonthalign     =&gt; :hcenter\n  :tex_output_standalone    =&gt; false\n  :extra_kwargs             =&gt; :series\n  :thickness_scaling        =&gt; 1\n  :layout                   =&gt; 1\n  :plot_titlelocation       =&gt; :center\n  :plot_titlefontsize       =&gt; 16\n  :plot_title               =&gt; \"\"\n  ⋮                         =&gt; ⋮\n\n\n\npl.series_list[1]\n\nPlots.Series(RecipesPipeline.DefaultsDict(:plot_object =&gt; Plot{Plots.GRBackend() n=1}, :subplot =&gt; Subplot{1}, :label =&gt; \"y1\", :fillalpha =&gt; nothing, :linealpha =&gt; nothing, :linecolor =&gt; RGBA{Float64}(0.0,0.6056031611752245,0.9786801175696073,1.0), :x_extrema =&gt; (NaN, NaN), :series_index =&gt; 1, :markerstrokealpha =&gt; nothing, :markeralpha =&gt; nothing…))\n\n\n\npl[:size]=(300,200)\n\n(300, 200)\n\n\n\npl\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLog-Scaled Axes\n\nxx = .1:.1:10\nplot(xx.^2, xaxis=:log, yaxis=:log)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(exp.(x), yaxis=:log)"
  },
  {
    "objectID": "tutorials/statistics.html",
    "href": "tutorials/statistics.html",
    "title": "Statistics references",
    "section": "",
    "text": "There are lots of great resources beyond this website. Here are some especially good ones."
  },
  {
    "objectID": "tutorials/statistics.html#references",
    "href": "tutorials/statistics.html#references",
    "title": "Statistics references",
    "section": "References",
    "text": "References"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setting Up Your Computer",
    "section": "",
    "text": "Getting set up for this course requires the following steps. If you are an experienced programmer, you are free to follow your own workflow to set up these tools. You will absolutely need Quarto, GitHub, and Julia. If you are not an experienced programmer, the following steps are not the only way to get these tools set up, but they are a very good way.\nIf you install course tools using steps other than the ones provided on this page, be aware that your instructors may be able to provide you with only limited support."
  },
  {
    "objectID": "setup.html#install-julia",
    "href": "setup.html#install-julia",
    "title": "Setting Up Your Computer",
    "section": "Install Julia",
    "text": "Install Julia\nI recommend installing Julia using the juliaup tool, which will let you easily manage versions in the future and works seamlessly with VS Code. The instructions can be found at the JuliaUp GitHub repository, but we will summarize them here.\n\nInstalling Juliaup on Windows\nIf your computer uses Windows, you can install Juliaup from the Windows Store.\n\n\nInstalling Juliaup on MacOS\nIf you have a Mac, open a terminal (such as the Terminal app) and enter:\ncurl -fsSL https://install.julialang.org | sh\n\n\nInstalling Julia 1.9\nOnce you install Juliaup, install Julia version 1.9 by opening a terminal (in MacOS or Linux) or the command line (in Windows) and entering:\njulia add 1.9\njulia default 1.9\nThis will install Julia 1.9 and make it the default version, which should maximize package compatibility throughout this course. Going forward, if you want to add new versions or change the default, you can follow the Juliaup instructions.\n\n\nMore Resources\nSee this tutorial for more information on using Julia."
  },
  {
    "objectID": "setup.html#install-and-set-up-vs-code",
    "href": "setup.html#install-and-set-up-vs-code",
    "title": "Setting Up Your Computer",
    "section": "Install and Set Up VS Code",
    "text": "Install and Set Up VS Code\nYou can skip this section if you already have an IDE you like; just set it up to work with Julia. Otherwise, VS Code is as close to an officially supported editor for Julia as you can get. We will follow this guide for setting up VS Code with Julia.\n\nInstalling VS Code\nYou can download it here; open the downloaded file to install. Make sure to select the correct version for your operating system. If you have a recent Apple mac, make sure to check whether you have an Intel or Apple chip.\n\n\nInstall the Julia Extension\n\nOpen VS Code.\nSelect View and click Extensions to open the Extension View.\nSearch for julia in the search box. Click the green install button.\nRestart VS Code once the installation is complete. It should automatically find your Julia installation; reach out if not.\n\nThe Julia VS Code extension offers you some nice features. You can start a REPL (an interactive Julia coding environment) by opening the “Command Palette” (View -&gt; Command Palette, or CTRL/CMD+SHIFT+P) and typing “REPL” to bring up “Julia: Start REPL”. You can also create .jl and .qmd files to write Julia code and execute line by line.\n\n\nMore Resources\nSee this tutorial for more information on using Julia."
  },
  {
    "objectID": "setup.html#set-up-github",
    "href": "setup.html#set-up-github",
    "title": "Setting Up Your Computer",
    "section": "Set Up GitHub",
    "text": "Set Up GitHub\n\nCreate GitHub Account\nIf you already have a GitHub account, you can use that for this course and do not need to create a new account. Otherwise, create an account. It doesn’t have to be linked to your Rice email or your NetID.\nFor labs and projects, you should use the GitHub Classroom link posted on Canvas to “accept” the assignment, which will give you your own GitHub repository for that assignment. The first time you click one of these links, you will need to link your place on the course roster with your GitHub account.\n\n\nGitHub Desktop (Optional)\nYou can do almost everything that you will need to do for this course with GitHub directly through VS Code. The GitHub desktop app is also great, or alternatively you may work directly through the terminal if you have prior experience.\n\n\nInstall Git\ngit is a version control software that powers GitHub under the hood (git is the version control software, GitHub is an online platform). Based on past experience with the course, you probably already have git installed. If you’re not sure if it’s installed, see instructions here.\n\n\nMore Resources\nSee GitHub official tutorials for more helpful resources and tutorials."
  },
  {
    "objectID": "setup.html#set-up-quarto",
    "href": "setup.html#set-up-quarto",
    "title": "Setting Up Your Computer",
    "section": "Set up Quarto",
    "text": "Set up Quarto\nQuarto combines the best of Jupyter notebooks and R Markdown to create a document format that is ideal for conducting and communicating data science. We will use Quarto to create and share our work in this course; this website is also built using Quarto.||\n\nInstall Quarto\nFollow the directions at https://quarto.org/docs/get-started/ to install Quarto. Be sure to ensure that you have the right version for your operating system.\n\n\nInstall the Quarto Extension for VS Code\nUnder “Step 2”, click on the VS Code icon.\n\n\nInstall Jupyter\nUnder the hood, Quarto uses Jupyter to run code. You don’t need to know how Jupyter works or worry about it, because it runs under the hood, but we will need to install it.\n\nIf you have Python installed\nIn your Terminal (open VS Code then open the terminal), run\npython3 -m pip install jupyter\nIf this throws an error, copy and paste the error onto Canvas\n\n\nIf you don’t have Python installed\n\nInstall Python\n\nWindows: see Microsoft instructions or Conda documentation\nMac/Linux: see Conda documentation\n\nFollow the instructions above\n\n\n\n\nMore Resources\nSee this tutorial for more information on using Quarto."
  },
  {
    "objectID": "setup.html#verify",
    "href": "setup.html#verify",
    "title": "Setting Up Your Computer",
    "section": "Verify",
    "text": "Verify\n\nLab 01 has a section that will help you verify that your setup is working.\nIf you have any trouble:\n\nOpen VS Code\nIn the Terminal, run quarto check\nTry to troubleshoot on your own; if you can’t, post the results of quarto check to Canvas"
  }
]